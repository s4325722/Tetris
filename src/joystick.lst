   1               		.file	"joystick.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  14               	delay_microsecond:
  15               	.LFB1:
  16               		.file 1 "joystick.c"
   1:joystick.c    **** /*
   2:joystick.c    ****  * joystick.c
   3:joystick.c    ****  *
   4:joystick.c    ****  * Written by Peter Sutton.
   5:joystick.c    ****  */
   6:joystick.c    **** 
   7:joystick.c    **** #ifdef AVR
   8:joystick.c    **** #include <avr/io.h>
   9:joystick.c    **** 
  10:joystick.c    **** uint16_t JoystickX;
  11:joystick.c    **** uint16_t JoystickY;
  12:joystick.c    **** uint8_t JoystickButtons;
  13:joystick.c    **** 
  14:joystick.c    **** void init_joystick(void) {
  15:joystick.c    **** 	/* Set data direction register appropriately. The following
  16:joystick.c    **** 	 * bits are configured to be outputs:
  17:joystick.c    **** 	 * SS, MOSI, SCK (i.e. PB0, PB2, PB1)
  18:joystick.c    **** 	 */
  19:joystick.c    **** 	DDRB |= 0x07;
  20:joystick.c    **** 
  21:joystick.c    **** 	/* Take the slave select line high */
  22:joystick.c    **** 	PORTB |= 0x01;
  23:joystick.c    **** 
  24:joystick.c    **** 	/* Setup SPI Control Register (SPCR) and SPSR
  25:joystick.c    **** 	 * We set as follows:
  26:joystick.c    **** 	 * - SPE bit = 1 (SPI Enable)
  27:joystick.c    **** 	 * - MSTR bit = 1 (Enable Master Mode)
  28:joystick.c    **** 	 * - CPOL and CPHA are 0 (SPI mode 0)
  29:joystick.c    **** 	 * - SPR1,SPR0 = 01 with SPI2X = 1 (in SPSR register)
  30:joystick.c    **** 	 *		 (Clock / 8, i.e. 1MHz)
  31:joystick.c    **** 	 */
  32:joystick.c    **** 	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  33:joystick.c    **** 	SPSR  = (1<<SPI2X);
  34:joystick.c    **** }
  35:joystick.c    **** 
  36:joystick.c    **** static void delay_microsecond(void) {
  17               		.loc 1 36 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  37:joystick.c    **** 	asm("nop\r\n" "nop\r\n" "nop\r\n" "nop\r\n"::);
  23               		.loc 1 37 0
  24               	/* #APP */
  25               	 ;  37 "joystick.c" 1
  26 0000 0000      		nop
  27 0002 0000      	nop
  28 0004 0000      	nop
  29 0006 0000      	nop
  30               	
  31               	 ;  0 "" 2
  32               	/* epilogue start */
  38:joystick.c    **** }
  33               		.loc 1 38 0
  34               	/* #NOAPP */
  35 0008 0895      		ret
  36               		.cfi_endproc
  37               	.LFE1:
  40               	transfer_byte:
  41               	.LFB2:
  39:joystick.c    **** 
  40:joystick.c    **** static uint8_t transfer_byte(uint8_t byte) {
  42               		.loc 1 40 0
  43               		.cfi_startproc
  44               	.LVL0:
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
  41:joystick.c    **** 	/* Write out byte to SPDR register. This will initiate
  42:joystick.c    **** 	 * the transfer. We then wait until the most significant
  43:joystick.c    **** 	 * bit of SPSR (SPIF bit) is set - this indicates that
  44:joystick.c    **** 	 * the transfer is complete. (The final read of SPSR
  45:joystick.c    **** 	 * (after the MSB is 1) followed by a read of SPDR will
  46:joystick.c    **** 	 * cause the SPIF bit to be reset to 0. See page 169
  47:joystick.c    **** 	 * of the ATmega64 datasheet.)
  48:joystick.c    **** 	 */
  49:joystick.c    **** 	SPDR = byte;
  49               		.loc 1 49 0
  50 000a 8FB9      		out 47-32,r24
  51               	.L3:
  50:joystick.c    **** 	while((SPSR & 0x80) == 0) {
  52               		.loc 1 50 0 discriminator 1
  53 000c 779B      		sbis 46-32,7
  54 000e 00C0      		rjmp .L3
  51:joystick.c    **** 		;
  52:joystick.c    **** 	}
  53:joystick.c    **** 	return SPDR;
  55               		.loc 1 53 0
  56 0010 8FB1      		in r24,47-32
  57               	.LVL1:
  58               	/* epilogue start */
  54:joystick.c    **** }
  59               		.loc 1 54 0
  60 0012 0895      		ret
  61               		.cfi_endproc
  62               	.LFE2:
  64               	.global	init_joystick
  66               	init_joystick:
  67               	.LFB0:
  14:joystick.c    **** void init_joystick(void) {
  68               		.loc 1 14 0
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  19:joystick.c    **** 	DDRB |= 0x07;
  74               		.loc 1 19 0
  75 0014 87B3      		in r24,55-32
  76 0016 8760      		ori r24,lo8(7)
  77 0018 87BB      		out 55-32,r24
  22:joystick.c    **** 	PORTB |= 0x01;
  78               		.loc 1 22 0
  79 001a C09A      		sbi 56-32,0
  32:joystick.c    **** 	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  80               		.loc 1 32 0
  81 001c 81E5      		ldi r24,lo8(81)
  82 001e 8DB9      		out 45-32,r24
  33:joystick.c    **** 	SPSR  = (1<<SPI2X);
  83               		.loc 1 33 0
  84 0020 81E0      		ldi r24,lo8(1)
  85 0022 8EB9      		out 46-32,r24
  86               	/* epilogue start */
  34:joystick.c    **** }
  87               		.loc 1 34 0
  88 0024 0895      		ret
  89               		.cfi_endproc
  90               	.LFE0:
  92               	.global	check_joystick
  94               	check_joystick:
  95               	.LFB3:
  55:joystick.c    **** 
  56:joystick.c    **** void check_joystick(uint8_t led1, uint8_t led2) {
  96               		.loc 1 56 0
  97               		.cfi_startproc
  98               	.LVL2:
  99 0026 DF92      		push r13
 100               	.LCFI0:
 101               		.cfi_def_cfa_offset 3
 102               		.cfi_offset 13, -2
 103 0028 EF92      		push r14
 104               	.LCFI1:
 105               		.cfi_def_cfa_offset 4
 106               		.cfi_offset 14, -3
 107 002a FF92      		push r15
 108               	.LCFI2:
 109               		.cfi_def_cfa_offset 5
 110               		.cfi_offset 15, -4
 111 002c 0F93      		push r16
 112               	.LCFI3:
 113               		.cfi_def_cfa_offset 6
 114               		.cfi_offset 16, -5
 115 002e 1F93      		push r17
 116               	.LCFI4:
 117               		.cfi_def_cfa_offset 7
 118               		.cfi_offset 17, -6
 119 0030 CF93      		push r28
 120               	.LCFI5:
 121               		.cfi_def_cfa_offset 8
 122               		.cfi_offset 28, -7
 123 0032 DF93      		push r29
 124               	.LCFI6:
 125               		.cfi_def_cfa_offset 9
 126               		.cfi_offset 29, -8
 127 0034 00D0      		rcall .
 128               	.LCFI7:
 129               		.cfi_def_cfa_offset 11
 130 0036 CDB7      		in r28,__SP_L__
 131 0038 DEB7      		in r29,__SP_H__
 132               	.LCFI8:
 133               		.cfi_def_cfa_register 28
 134               	/* prologue: function */
 135               	/* frame size = 2 */
 136               	/* stack size = 9 */
 137               	.L__stack_usage = 9
  57:joystick.c    **** 	uint8_t Xlow, Xhigh, Ylow, Yhigh;
  58:joystick.c    **** 	uint8_t i;
  59:joystick.c    **** 	uint8_t cmd;
  60:joystick.c    **** 
  61:joystick.c    **** 	/* Take SS (slave select) line (bit 0 of port B) low */
  62:joystick.c    **** 	PORTB &= 0xFE;
 138               		.loc 1 62 0
 139 003a C098      		cbi 56-32,0
 140               	.LVL3:
 141 003c 1FE0      		ldi r17,lo8(15)
 142               	.LVL4:
 143               	.L7:
  63:joystick.c    **** 
  64:joystick.c    **** 	/* Wait 15 microseconds */
  65:joystick.c    **** 	for(i=0; i<15; i++) {
  66:joystick.c    **** 		delay_microsecond();
 144               		.loc 1 66 0 discriminator 2
 145 003e 6A83      		std Y+2,r22
 146 0040 8983      		std Y+1,r24
 147 0042 0E94 0000 		call delay_microsecond
 148 0046 1150      		subi r17,lo8(-(-1))
  65:joystick.c    **** 	for(i=0; i<15; i++) {
 149               		.loc 1 65 0 discriminator 2
 150 0048 6A81      		ldd r22,Y+2
 151 004a 8981      		ldd r24,Y+1
 152 004c 1123      		tst r17
 153 004e 01F4      		brne .L7
 154               	.LVL5:
  67:joystick.c    **** 	}
  68:joystick.c    **** 
  69:joystick.c    **** 	/* Construct command word */
  70:joystick.c    **** 	cmd = 0x80;
  71:joystick.c    **** 	if(led1) {
 155               		.loc 1 71 0
 156 0050 8823      		tst r24
 157 0052 01F4      		brne .L14
  70:joystick.c    **** 	cmd = 0x80;
 158               		.loc 1 70 0
 159 0054 80E8      		ldi r24,lo8(-128)
 160 0056 00C0      		rjmp .L8
 161               	.L14:
  72:joystick.c    **** 		cmd |= 0x01;
 162               		.loc 1 72 0
 163 0058 81E8      		ldi r24,lo8(-127)
 164               	.L8:
 165               	.LVL6:
  73:joystick.c    **** 	}
  74:joystick.c    **** 	if(led2) {
 166               		.loc 1 74 0
 167 005a 6111      		cpse r22,__zero_reg__
  75:joystick.c    **** 		cmd |= 0x02;
 168               		.loc 1 75 0
 169 005c 8260      		ori r24,lo8(2)
 170               	.LVL7:
 171               	.L9:
  76:joystick.c    **** 	}
  77:joystick.c    **** 
  78:joystick.c    **** 	Xlow = transfer_byte(cmd);
 172               		.loc 1 78 0
 173 005e 0E94 0000 		call transfer_byte
 174               	.LVL8:
 175 0062 182F      		mov r17,r24
 176               	.LVL9:
 177 0064 0AE0      		ldi r16,lo8(10)
 178               	.LVL10:
 179               	.L10:
  79:joystick.c    **** 
  80:joystick.c    **** 	/* Wait for 10 microseconds */
  81:joystick.c    **** 	for(i=0; i<10; i++) {
  82:joystick.c    **** 		delay_microsecond();
 180               		.loc 1 82 0 discriminator 2
 181 0066 0E94 0000 		call delay_microsecond
 182 006a 0150      		subi r16,lo8(-(-1))
  81:joystick.c    **** 	for(i=0; i<10; i++) {
 183               		.loc 1 81 0 discriminator 2
 184 006c 01F4      		brne .L10
  83:joystick.c    **** 	}
  84:joystick.c    **** 
  85:joystick.c    **** 	Xhigh = transfer_byte(0);
 185               		.loc 1 85 0
 186 006e 80E0      		ldi r24,lo8(0)
 187 0070 0E94 0000 		call transfer_byte
 188 0074 082F      		mov r16,r24
 189               	.LVL11:
 190 0076 2AE0      		ldi r18,lo8(10)
 191 0078 F22E      		mov r15,r18
 192               	.LVL12:
 193               	.L11:
  86:joystick.c    **** 
  87:joystick.c    **** 	/* Wait for 10 microseconds */
  88:joystick.c    **** 	for(i=0; i<10; i++) {
  89:joystick.c    **** 		delay_microsecond();
 194               		.loc 1 89 0 discriminator 2
 195 007a 0E94 0000 		call delay_microsecond
 196 007e FA94      		dec r15
  88:joystick.c    **** 	for(i=0; i<10; i++) {
 197               		.loc 1 88 0 discriminator 2
 198 0080 01F4      		brne .L11
  90:joystick.c    **** 	}
  91:joystick.c    **** 
  92:joystick.c    **** 	Ylow = transfer_byte(0);
 199               		.loc 1 92 0
 200 0082 80E0      		ldi r24,lo8(0)
 201 0084 0E94 0000 		call transfer_byte
 202 0088 E82E      		mov r14,r24
 203               	.LVL13:
 204 008a 9AE0      		ldi r25,lo8(10)
 205 008c F92E      		mov r15,r25
 206               	.LVL14:
 207               	.L12:
  93:joystick.c    **** 
  94:joystick.c    **** 	/* Wait for 10 microseconds */
  95:joystick.c    **** 	for(i=0; i<10; i++) {
  96:joystick.c    **** 		delay_microsecond();
 208               		.loc 1 96 0 discriminator 2
 209 008e 0E94 0000 		call delay_microsecond
 210 0092 FA94      		dec r15
  95:joystick.c    **** 	for(i=0; i<10; i++) {
 211               		.loc 1 95 0 discriminator 2
 212 0094 01F4      		brne .L12
  97:joystick.c    **** 	}
  98:joystick.c    **** 
  99:joystick.c    **** 	Yhigh = transfer_byte(0);
 213               		.loc 1 99 0
 214 0096 80E0      		ldi r24,lo8(0)
 215 0098 0E94 0000 		call transfer_byte
 216 009c D82E      		mov r13,r24
 217               	.LVL15:
 218 009e 8AE0      		ldi r24,lo8(10)
 219 00a0 F82E      		mov r15,r24
 220               	.LVL16:
 221               	.L13:
 100:joystick.c    **** 
 101:joystick.c    **** 	/* Wait for 10 microseconds */
 102:joystick.c    **** 	for(i=0; i<10; i++) {
 103:joystick.c    **** 		delay_microsecond();
 222               		.loc 1 103 0 discriminator 2
 223 00a2 0E94 0000 		call delay_microsecond
 224 00a6 FA94      		dec r15
 102:joystick.c    **** 	for(i=0; i<10; i++) {
 225               		.loc 1 102 0 discriminator 2
 226 00a8 01F4      		brne .L13
 104:joystick.c    **** 	}
 105:joystick.c    **** 
 106:joystick.c    **** 	JoystickButtons = transfer_byte(0);
 227               		.loc 1 106 0
 228 00aa 80E0      		ldi r24,lo8(0)
 229 00ac 0E94 0000 		call transfer_byte
 230 00b0 8093 0000 		sts JoystickButtons,r24
 107:joystick.c    **** 
 108:joystick.c    **** 	/* Take SS line high again */
 109:joystick.c    **** 	PORTB |= 0x01;
 231               		.loc 1 109 0
 232 00b4 C09A      		sbi 56-32,0
 110:joystick.c    **** 
 111:joystick.c    **** 	JoystickX = (Xhigh << 8) | Xlow;
 233               		.loc 1 111 0
 234 00b6 502F      		mov r21,r16
 235 00b8 40E0      		ldi r20,lo8(0)
 236 00ba 212F      		mov r18,r17
 237 00bc 30E0      		ldi r19,lo8(0)
 238 00be 242B      		or r18,r20
 239 00c0 352B      		or r19,r21
 240 00c2 3093 0000 		sts JoystickX+1,r19
 241 00c6 2093 0000 		sts JoystickX,r18
 112:joystick.c    **** 	JoystickY = (Yhigh << 8) | Ylow;
 242               		.loc 1 112 0
 243 00ca 3D2D      		mov r19,r13
 244 00cc 20E0      		ldi r18,lo8(0)
 245 00ce 8E2D      		mov r24,r14
 246 00d0 90E0      		ldi r25,lo8(0)
 247 00d2 822B      		or r24,r18
 248 00d4 932B      		or r25,r19
 249 00d6 9093 0000 		sts JoystickY+1,r25
 250 00da 8093 0000 		sts JoystickY,r24
 251               	/* epilogue start */
 113:joystick.c    **** }
 252               		.loc 1 113 0
 253 00de 0F90      		pop __tmp_reg__
 254 00e0 0F90      		pop __tmp_reg__
 255 00e2 DF91      		pop r29
 256 00e4 CF91      		pop r28
 257 00e6 1F91      		pop r17
 258               	.LVL17:
 259 00e8 0F91      		pop r16
 260               	.LVL18:
 261 00ea FF90      		pop r15
 262 00ec EF90      		pop r14
 263               	.LVL19:
 264 00ee DF90      		pop r13
 265               	.LVL20:
 266 00f0 0895      		ret
 267               		.cfi_endproc
 268               	.LFE3:
 270               		.comm JoystickButtons,1,1
 271               		.comm JoystickY,2,1
 272               		.comm JoystickX,2,1
 273               	.Letext0:
 274               		.file 2 "/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 joystick.c
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:2      *ABS*:0000003f __SREG__
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:3      *ABS*:0000003e __SP_H__
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:4      *ABS*:0000003d __SP_L__
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:5      *ABS*:00000034 __CCP__
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:7      *ABS*:00000001 __zero_reg__
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:14     .text:00000000 delay_microsecond
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:40     .text:0000000a transfer_byte
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:66     .text:00000014 init_joystick
/var/folders/5q/cbspj09573sdz95ppjc1lv4w0000gn/T//ccmy2XS4.s:94     .text:00000026 check_joystick
                            *COM*:00000001 JoystickButtons
                            *COM*:00000002 JoystickX
                            *COM*:00000002 JoystickY

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
