
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00001a0c  00001aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015c  0080017a  0080017a  00001b1a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000019d  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003c0  00000000  00000000  00002940  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003140  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014bf  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ff  00000000  00000000  000072ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f4  00000000  00000000  00008800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b89  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d49  00000000  00000000  00009d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000bac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ca 00 	jmp	0x194	; 0x194 <__ctors_end>
       4:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_1>
       8:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_2>
       c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_3>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_4>
      14:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      1c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      20:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      24:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_9>
      28:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      2c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      30:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      38:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      3c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      48:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_18>
      4c:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_19>
      50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      58:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      5c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      60:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      68:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      6c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      70:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      78:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      7c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      80:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      84:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>

0000008c <letters>:
      8c:	d4 00 d8 00 dc 00 e0 00 e4 00 e8 00 ec 00 f0 00     ................
      9c:	f4 00 f7 00 fb 00 ff 00 03 01 08 01 0c 01 10 01     ................
      ac:	14 01 19 01 1d 01 21 01 26 01 2a 01 2f 01 34 01     ......!.&.*./.4.
      bc:	39 01 3e 01                                         9.>.

000000c0 <numbers>:
      c0:	43 01 47 01 4a 01 4e 01 52 01 56 01 5a 01 5e 01     C.G.J.N.R.V.Z.^.
      d0:	62 01 66 01                                         b.f.

000000d4 <cols_a>:
      d4:	7e 90 90 7f                                         ~...

000000d8 <cols_b>:
      d8:	fe 92 92 6d                                         ...m

000000dc <cols_c>:
      dc:	7c 82 82 45                                         |..E

000000e0 <cols_d>:
      e0:	fe 82 82 7d                                         ...}

000000e4 <cols_e>:
      e4:	fe 92 92 83                                         ....

000000e8 <cols_f>:
      e8:	fe 90 90 81                                         ....

000000ec <cols_g>:
      ec:	7c 82 92 5d                                         |..]

000000f0 <cols_h>:
      f0:	fe 10 10 ff                                         ....

000000f4 <cols_i>:
      f4:	82 fe 83                                            ...

000000f7 <cols_j>:
      f7:	04 02 02 fd                                         ....

000000fb <cols_k>:
      fb:	fe 10 28 c7                                         ..(.

000000ff <cols_l>:
      ff:	fe 02 02 03                                         ....

00000103 <cols_m>:
     103:	fe 40 30 40 ff                                      .@0@.

00000108 <cols_n>:
     108:	fe 20 10 ff                                         . ..

0000010c <cols_o>:
     10c:	7c 82 82 7d                                         |..}

00000110 <cols_p>:
     110:	fe 90 90 61                                         ...a

00000114 <cols_q>:
     114:	7c 82 8a 7c 03                                      |..|.

00000119 <cols_r>:
     119:	fe 90 98 67                                         ...g

0000011d <cols_s>:
     11d:	64 92 92 4d                                         d..M

00000121 <cols_t>:
     121:	80 80 fe 80 81                                      .....

00000126 <cols_u>:
     126:	fc 02 02 fd                                         ....

0000012a <cols_v>:
     12a:	f8 04 02 04 f9                                      .....

0000012f <cols_w>:
     12f:	fc 02 1c 02 fd                                      .....

00000134 <cols_x>:
     134:	c6 28 10 28 c7                                      .(.(.

00000139 <cols_y>:
     139:	e0 10 0e 10 e1                                      .....

0000013e <cols_z>:
     13e:	86 8a 92 a2 c3                                      .....

00000143 <cols_0>:
     143:	7c 92 a2 7d                                         |..}

00000147 <cols_1>:
     147:	42 fe 03                                            B..

0000014a <cols_2>:
     14a:	46 8a 92 63                                         F..c

0000014e <cols_3>:
     14e:	44 92 92 6d                                         D..m

00000152 <cols_4>:
     152:	18 28 48 ff                                         .(H.

00000156 <cols_5>:
     156:	e4 a2 a2 9d                                         ....

0000015a <cols_6>:
     15a:	7c 92 92 4d                                         |..M

0000015e <cols_7>:
     15e:	80 9e a0 c1                                         ....

00000162 <cols_8>:
     162:	6c 92 92 6d                                         l..m

00000166 <cols_9>:
     166:	64 92 92 7d                                         d..}

0000016a <__c.1586>:
     16a:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000173 <__c.1591>:
     173:	1b 5b 30 6d 00                                      .[0m.

00000178 <__c.1596>:
     178:	1b 5b 37 6d 00                                      .[7m.

0000017d <__c.1601>:
     17d:	1b 5b 32 4a 00                                      .[2J.

00000182 <__c.1606>:
     182:	1b 5b 4b 00                                         .[K.

00000186 <__c.1611>:
     186:	1b 5b 25 64 6d 00                                   .[%dm.

0000018c <__c.1628>:
     18c:	1b 5b 42 1b 5b 44 00 00                             .[B.[D..

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e1       	ldi	r29, 0x10	; 16
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	ec e0       	ldi	r30, 0x0C	; 12
     1a8:	fa e1       	ldi	r31, 0x1A	; 26
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x10>
     1ac:	05 90       	lpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	aa 37       	cpi	r26, 0x7A	; 122
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0xc>

000001b6 <__do_clear_bss>:
     1b6:	12 e0       	ldi	r17, 0x02	; 2
     1b8:	aa e7       	ldi	r26, 0x7A	; 122
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a6 3d       	cpi	r26, 0xD6	; 214
     1c2:	b1 07       	cpc	r27, r17
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 c6 08 	call	0x118c	; 0x118c <main>
     1ca:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <_exit>

000001ce <__bad_interrupt>:
     1ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d2 <init_board>:

/* 
 * Initialise board - no pieces (i.e. set the row data to contain
 * all zeroes.)
 */
void init_board(void) {
     1d2:	e1 e9       	ldi	r30, 0x91	; 145
     1d4:	f1 e0       	ldi	r31, 0x01	; 1
     1d6:	8f e0       	ldi	r24, 0x0F	; 15
	uint8_t i;

	for(i=0; i < BOARD_ROWS; i++) {
		board[i] = 0;
     1d8:	11 92       	st	Z+, r1
     1da:	81 50       	subi	r24, 0x01	; 1
 * all zeroes.)
 */
void init_board(void) {
	uint8_t i;

	for(i=0; i < BOARD_ROWS; i++) {
     1dc:	e9 f7       	brne	.-6      	; 0x1d8 <init_board+0x6>
		board[i] = 0;
	}
	
	/* -1 in piece_row_num indicates no current piece */
	piece_row_num = -1;
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	80 93 a0 01 	sts	0x01A0, r24
}
     1e4:	08 95       	ret

000001e6 <copy_board_to_led_display>:
 * has 15 rows (numbered from the bottom), each 7 bits wide (with the 
 * 7 columns numbered as per the bits - i.e. least significant (0) on 
 * the right). The LED display has 7 rows (0 at the top, 6 at the bottom) 
 * with 15 columns (numbered from 0 at the bottom to 14 at the top).
 */
void copy_board_to_led_display(void) {
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
		led_display_row = 0;
		for(board_row_num = BOARD_ROWS-1; board_row_num >= 0; board_row_num--) {
			led_display_row <<=1;
			led_display_row |= (board[board_row_num]>>board_col_num)&1;
			/* If the current piece covers this row - add it in also. */
			if(piece_row_num >= 0 && board_row_num >= piece_row_num &&
     1f6:	a0 91 a0 01 	lds	r26, 0x01A0
					board_row_num < (piece_row_num + current_piece.y_dimension)) {
     1fa:	8a 2f       	mov	r24, r26
     1fc:	99 27       	eor	r25, r25
     1fe:	87 fd       	sbrc	r24, 7
     200:	90 95       	com	r25
     202:	20 91 a5 01 	lds	r18, 0x01A5
     206:	6c 01       	movw	r12, r24
     208:	c2 0e       	add	r12, r18
     20a:	d1 1c       	adc	r13, r1
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
 * has 15 rows (numbered from the bottom), each 7 bits wide (with the 
 * 7 columns numbered as per the bits - i.e. least significant (0) on 
 * the right). The LED display has 7 rows (0 at the top, 6 at the bottom) 
 * with 15 columns (numbered from 0 at the bottom to 14 at the top).
 */
void copy_board_to_led_display(void) {
     210:	c1 ea       	ldi	r28, 0xA1	; 161
     212:	d1 e0       	ldi	r29, 0x01	; 1
     214:	c8 1b       	sub	r28, r24
     216:	d9 0b       	sbc	r29, r25
     218:	f6 e0       	ldi	r31, 0x06	; 6
     21a:	ef 2e       	mov	r14, r31
     21c:	f1 2c       	mov	r15, r1
     21e:	3b c0       	rjmp	.+118    	; 0x296 <copy_board_to_led_display+0xb0>
	int8_t board_col_num;
	uint16_t led_display_row;
	for(board_col_num = 0; board_col_num < BOARD_WIDTH; board_col_num++) {
		led_display_row = 0;
		for(board_row_num = BOARD_ROWS-1; board_row_num >= 0; board_row_num--) {
			led_display_row <<=1;
     220:	c9 01       	movw	r24, r18
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
			led_display_row |= (board[board_row_num]>>board_col_num)&1;
     226:	f8 01       	movw	r30, r16
     228:	22 91       	ld	r18, -Z
     22a:	8f 01       	movw	r16, r30
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	0b 2e       	mov	r0, r27
     230:	02 c0       	rjmp	.+4      	; 0x236 <copy_board_to_led_display+0x50>
     232:	35 95       	asr	r19
     234:	27 95       	ror	r18
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <copy_board_to_led_display+0x4c>
     23a:	21 70       	andi	r18, 0x01	; 1
     23c:	30 70       	andi	r19, 0x00	; 0
     23e:	28 2b       	or	r18, r24
     240:	39 2b       	or	r19, r25
			/* If the current piece covers this row - add it in also. */
			if(piece_row_num >= 0 && board_row_num >= piece_row_num &&
     242:	a7 fd       	sbrc	r26, 7
     244:	14 c0       	rjmp	.+40     	; 0x26e <copy_board_to_led_display+0x88>
     246:	4a 17       	cp	r20, r26
     248:	94 f0       	brlt	.+36     	; 0x26e <copy_board_to_led_display+0x88>
     24a:	4c 15       	cp	r20, r12
     24c:	5d 05       	cpc	r21, r13
     24e:	7c f4       	brge	.+30     	; 0x26e <copy_board_to_led_display+0x88>
 * has 15 rows (numbered from the bottom), each 7 bits wide (with the 
 * 7 columns numbered as per the bits - i.e. least significant (0) on 
 * the right). The LED display has 7 rows (0 at the top, 6 at the bottom) 
 * with 15 columns (numbered from 0 at the bottom to 14 at the top).
 */
void copy_board_to_led_display(void) {
     250:	fe 01       	movw	r30, r28
     252:	e4 0f       	add	r30, r20
     254:	f5 1f       	adc	r31, r21
			/* If the current piece covers this row - add it in also. */
			if(piece_row_num >= 0 && board_row_num >= piece_row_num &&
					board_row_num < (piece_row_num + current_piece.y_dimension)) {
				led_display_row |= 
						((current_piece.rowdata[board_row_num - piece_row_num]
							>>board_col_num)&1);
     256:	80 81       	ld	r24, Z
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0b 2e       	mov	r0, r27
     25c:	02 c0       	rjmp	.+4      	; 0x262 <copy_board_to_led_display+0x7c>
     25e:	95 95       	asr	r25
     260:	87 95       	ror	r24
     262:	0a 94       	dec	r0
     264:	e2 f7       	brpl	.-8      	; 0x25e <copy_board_to_led_display+0x78>
			led_display_row <<=1;
			led_display_row |= (board[board_row_num]>>board_col_num)&1;
			/* If the current piece covers this row - add it in also. */
			if(piece_row_num >= 0 && board_row_num >= piece_row_num &&
					board_row_num < (piece_row_num + current_piece.y_dimension)) {
				led_display_row |= 
     266:	81 70       	andi	r24, 0x01	; 1
     268:	90 70       	andi	r25, 0x00	; 0
     26a:	28 2b       	or	r18, r24
     26c:	39 2b       	or	r19, r25
     26e:	41 50       	subi	r20, 0x01	; 1
     270:	50 40       	sbci	r21, 0x00	; 0
	int8_t board_row_num;
	int8_t board_col_num;
	uint16_t led_display_row;
	for(board_col_num = 0; board_col_num < BOARD_WIDTH; board_col_num++) {
		led_display_row = 0;
		for(board_row_num = BOARD_ROWS-1; board_row_num >= 0; board_row_num--) {
     272:	ff ef       	ldi	r31, 0xFF	; 255
     274:	4f 3f       	cpi	r20, 0xFF	; 255
     276:	5f 07       	cpc	r21, r31
     278:	99 f6       	brne	.-90     	; 0x220 <copy_board_to_led_display+0x3a>
 * has 15 rows (numbered from the bottom), each 7 bits wide (with the 
 * 7 columns numbered as per the bits - i.e. least significant (0) on 
 * the right). The LED display has 7 rows (0 at the top, 6 at the bottom) 
 * with 15 columns (numbered from 0 at the bottom to 14 at the top).
 */
void copy_board_to_led_display(void) {
     27a:	f7 01       	movw	r30, r14
     27c:	e6 1b       	sub	r30, r22
     27e:	f7 0b       	sbc	r31, r23
		}

		/* Copy this row to the LED display. Lower LED display 
		 * row numbers correspond to higher board column numbers
		 */
		display[6-board_col_num] = led_display_row;
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e4 55       	subi	r30, 0x54	; 84
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	31 83       	std	Z+1, r19	; 0x01
     28a:	20 83       	st	Z, r18
     28c:	6f 5f       	subi	r22, 0xFF	; 255
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
	 * current state of the board.
	 */
	int8_t board_row_num;
	int8_t board_col_num;
	uint16_t led_display_row;
	for(board_col_num = 0; board_col_num < BOARD_WIDTH; board_col_num++) {
     290:	67 30       	cpi	r22, 0x07	; 7
     292:	71 05       	cpc	r23, r1
     294:	41 f0       	breq	.+16     	; 0x2a6 <copy_board_to_led_display+0xc0>
     296:	00 ea       	ldi	r16, 0xA0	; 160
     298:	11 e0       	ldi	r17, 0x01	; 1
 * has 15 rows (numbered from the bottom), each 7 bits wide (with the 
 * 7 columns numbered as per the bits - i.e. least significant (0) on 
 * the right). The LED display has 7 rows (0 at the top, 6 at the bottom) 
 * with 15 columns (numbered from 0 at the bottom to 14 at the top).
 */
void copy_board_to_led_display(void) {
     29a:	4e e0       	ldi	r20, 0x0E	; 14
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t led_display_row;
	for(board_col_num = 0; board_col_num < BOARD_WIDTH; board_col_num++) {
		led_display_row = 0;
		for(board_row_num = BOARD_ROWS-1; board_row_num >= 0; board_row_num--) {
			led_display_row <<=1;
			led_display_row |= (board[board_row_num]>>board_col_num)&1;
     2a2:	b6 2f       	mov	r27, r22
     2a4:	bd cf       	rjmp	.-134    	; 0x220 <copy_board_to_led_display+0x3a>
		display[6-board_col_num] = led_display_row;
	}
#ifndef AVR
	display_board();
#endif
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	ff 90       	pop	r15
     2b0:	ef 90       	pop	r14
     2b2:	df 90       	pop	r13
     2b4:	cf 90       	pop	r12
     2b6:	08 95       	ret

000002b8 <have_current_piece>:
			
/*
 * Checks whether have current piece
 */
int8_t have_current_piece(void) {
	return (piece_row_num != -1);
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 91 a0 01 	lds	r25, 0x01A0
     2be:	9f 3f       	cpi	r25, 0xFF	; 255
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <have_current_piece+0xc>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
}
     2c4:	08 95       	ret

000002c6 <fix_piece_to_board>:
 * Add piece to board at its current position. We do this using a
 * bitwise OR for each row that contains the piece.
 */
void fix_piece_to_board(void) {
	int8_t i;
	for(i=0; i < current_piece.y_dimension; i++) {
     2c6:	a1 ea       	ldi	r26, 0xA1	; 161
     2c8:	b1 e0       	ldi	r27, 0x01	; 1
		board[piece_row_num + i] |= current_piece.rowdata[i];
     2ca:	e0 91 a0 01 	lds	r30, 0x01A0
     2ce:	ff 27       	eor	r31, r31
     2d0:	e7 fd       	sbrc	r30, 7
     2d2:	f0 95       	com	r31

/*
 * Add piece to board at its current position. We do this using a
 * bitwise OR for each row that contains the piece.
 */
void fix_piece_to_board(void) {
     2d4:	ef 56       	subi	r30, 0x6F	; 111
     2d6:	fe 4f       	sbci	r31, 0xFE	; 254
     2d8:	20 91 a5 01 	lds	r18, 0x01A5
	int8_t i;
	for(i=0; i < current_piece.y_dimension; i++) {
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <fix_piece_to_board+0x24>
		board[piece_row_num + i] |= current_piece.rowdata[i];
     2e0:	3d 91       	ld	r19, X+
     2e2:	90 81       	ld	r25, Z
     2e4:	93 2b       	or	r25, r19
     2e6:	91 93       	st	Z+, r25
 * Add piece to board at its current position. We do this using a
 * bitwise OR for each row that contains the piece.
 */
void fix_piece_to_board(void) {
	int8_t i;
	for(i=0; i < current_piece.y_dimension; i++) {
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	82 17       	cp	r24, r18
     2ec:	c9 f7       	brne	.-14     	; 0x2e0 <fix_piece_to_board+0x1a>
		board[piece_row_num + i] |= current_piece.rowdata[i];
	}
	/*
	 * Indicate that we no longer have a current piece
	 */
	piece_row_num = -1;
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	80 93 a0 01 	sts	0x01A0, r24
	check_for_completed_rows();
}
     2f4:	08 95       	ret

000002f6 <check_for_completed_rows>:
	 * old row BOARD_ROWS - 1 becomes row BOARD_ROWS - 3;
	 * row BOARD_ROWS - 2 (second top row) is set to 0
	 * row BOARD_ROWS - 1 (top row) is set to 0
	 */
	
}
     2f6:	08 95       	ret

000002f8 <piece_overlap>:

/* 
 * Check whether the given piece will intersect with pieces already on the
 * board (assuming the piece is placed at the given row number).
*/
int8_t piece_overlap(piece_type* piece, int8_t row_num) {
     2f8:	dc 01       	movw	r26, r24
	int8_t row;
	for(row=0; row < piece->y_dimension; row++) {
     2fa:	14 96       	adiw	r26, 0x04	; 4
     2fc:	2c 91       	ld	r18, X
     2fe:	14 97       	sbiw	r26, 0x04	; 4
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0

/* 
 * Check whether the given piece will intersect with pieces already on the
 * board (assuming the piece is placed at the given row number).
*/
int8_t piece_overlap(piece_type* piece, int8_t row_num) {
     306:	77 27       	eor	r23, r23
     308:	67 fd       	sbrc	r22, 7
     30a:	70 95       	com	r23
     30c:	6f 56       	subi	r22, 0x6F	; 111
     30e:	7e 4f       	sbci	r23, 0xFE	; 254
	int8_t row;
	for(row=0; row < piece->y_dimension; row++) {
     310:	09 c0       	rjmp	.+18     	; 0x324 <piece_overlap+0x2c>
		if(piece->rowdata[row] & board[row_num + row]) {
     312:	4d 91       	ld	r20, X+

/* 
 * Check whether the given piece will intersect with pieces already on the
 * board (assuming the piece is placed at the given row number).
*/
int8_t piece_overlap(piece_type* piece, int8_t row_num) {
     314:	fb 01       	movw	r30, r22
     316:	e8 0f       	add	r30, r24
     318:	f9 1f       	adc	r31, r25
	int8_t row;
	for(row=0; row < piece->y_dimension; row++) {
		if(piece->rowdata[row] & board[row_num + row]) {
     31a:	50 81       	ld	r21, Z
     31c:	45 23       	and	r20, r21
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	44 23       	and	r20, r20
     322:	29 f4       	brne	.+10     	; 0x32e <piece_overlap+0x36>
 * Check whether the given piece will intersect with pieces already on the
 * board (assuming the piece is placed at the given row number).
*/
int8_t piece_overlap(piece_type* piece, int8_t row_num) {
	int8_t row;
	for(row=0; row < piece->y_dimension; row++) {
     324:	82 17       	cp	r24, r18
     326:	93 07       	cpc	r25, r19
     328:	a4 f3       	brlt	.-24     	; 0x312 <piece_overlap+0x1a>
		if(piece->rowdata[row] & board[row_num + row]) {
			/* Got an intersection (AND is non-zero) */
			return 1;
		}
	}
	return 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	08 95       	ret
int8_t piece_overlap(piece_type* piece, int8_t row_num) {
	int8_t row;
	for(row=0; row < piece->y_dimension; row++) {
		if(piece->rowdata[row] & board[row_num + row]) {
			/* Got an intersection (AND is non-zero) */
			return 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
     330:	08 95       	ret

00000332 <attempt_rotation>:
/*
 * Attempt to rotate the piece clockwise 90 degrees. Returns 1 if the
 * rotation is successful, 0 otherwise (e.g. a piece on the board
 * blocks the rotation).
 */
int8_t attempt_rotation(void) {
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	00 d0       	rcall	.+0      	; 0x338 <attempt_rotation+0x6>
     338:	00 d0       	rcall	.+0      	; 0x33a <attempt_rotation+0x8>
     33a:	00 d0       	rcall	.+0      	; 0x33c <attempt_rotation+0xa>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	
	/*
	 * Make a copy of our piece in its current orientation (in case
	 * we need to restore it)
	 */
	copy_piece(&current_piece, &backup_piece);
     340:	81 ea       	ldi	r24, 0xA1	; 161
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	be 01       	movw	r22, r28
     346:	6f 5f       	subi	r22, 0xFF	; 255
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <copy_piece>

	/*
	 * Attempt rotation (will only fail if too close to right hand
	 * side)
	 */
	if(!rotate_piece(&current_piece)) {
     34e:	81 ea       	ldi	r24, 0xA1	; 161
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rotate_piece>
     356:	88 23       	and	r24, r24
     358:	71 f0       	breq	.+28     	; 0x376 <attempt_rotation+0x44>
	
	/* 
	 * Need to check if rotated piece will intersect with existing
	 * pieces. If yes, restore old piece and return failure
	 */
	if(piece_overlap(&current_piece, piece_row_num)) {
     35a:	81 ea       	ldi	r24, 0xA1	; 161
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	60 91 a0 01 	lds	r22, 0x01A0
     362:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <piece_overlap>
     366:	88 23       	and	r24, r24
     368:	41 f0       	breq	.+16     	; 0x37a <attempt_rotation+0x48>
		/*
		 * Current board position does not allow move.
		 * Restore original piece
		 */
		copy_piece(&backup_piece, &current_piece);
     36a:	ce 01       	movw	r24, r28
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	61 ea       	ldi	r22, 0xA1	; 161
     370:	71 e0       	ldi	r23, 0x01	; 1
     372:	0e 94 d5 03 	call	0x7aa	; 0x7aa <copy_piece>
	/*
	 * Attempt rotation (will only fail if too close to right hand
	 * side)
	 */
	if(!rotate_piece(&current_piece)) {
		return 0;
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	01 c0       	rjmp	.+2      	; 0x37c <attempt_rotation+0x4a>
		copy_piece(&backup_piece, &current_piece);
		return 0;
	}
	
	/* Move has been made - return success */
	return 1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
}
     37c:	26 96       	adiw	r28, 0x06	; 6
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <attempt_drop_piece_one_row>:
 * are squares blocked on the row below or we're at the bottom of
 * the board. Returns 1 if drop succeeded, 
 * 0 otherwise. (If the drop fails, the caller should add the piece
 * to the board.)
*/
int8_t attempt_drop_piece_one_row(void) {
     38e:	cf 93       	push	r28
	/*
	 * Check if the piece has
	 * reached the bottom of the board. Nothing to do in this
	 * case - return false - we can't drop it any further.
	 */
	if(piece_row_num == 0) {
     390:	c0 91 a0 01 	lds	r28, 0x01A0
     394:	cc 23       	and	r28, r28
     396:	61 f0       	breq	.+24     	; 0x3b0 <attempt_drop_piece_one_row+0x22>
	
	/*
	 * Check whether the piece would intersect with any board
	 * pieces if it dropped one position 
	 */
	if(piece_overlap(&current_piece, piece_row_num - 1)) {
     398:	c1 50       	subi	r28, 0x01	; 1
     39a:	81 ea       	ldi	r24, 0xA1	; 161
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6c 2f       	mov	r22, r28
     3a0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <piece_overlap>
     3a4:	88 23       	and	r24, r24
     3a6:	21 f4       	brne	.+8      	; 0x3b0 <attempt_drop_piece_one_row+0x22>
	}
	
	/*
	 * Only get here if piece drop would succeed - make it happen
	 */
	piece_row_num--;
     3a8:	c0 93 a0 01 	sts	0x01A0, r28
	return 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <attempt_drop_piece_one_row+0x24>
	/*
	 * Check whether the piece would intersect with any board
	 * pieces if it dropped one position 
	 */
	if(piece_overlap(&current_piece, piece_row_num - 1)) {
		return 0;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
	/*
	 * Only get here if piece drop would succeed - make it happen
	 */
	piece_row_num--;
	return 1;
}
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <attempt_move>:
 * This succeeds if
 * (1) the piece isn't all the way to the side, and
 * (2) the board contains no pieces in that position.
 * Returns 1 if move successful, 0 otherwise.
 */
int8_t attempt_move(int8_t direction) {	
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	00 d0       	rcall	.+0      	; 0x3be <attempt_move+0x8>
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <attempt_move+0xa>
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <attempt_move+0xc>
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	18 2f       	mov	r17, r24
	
	/*
	 * Make a copy of our piece in its current position (in case
	 * we need to restore it)
	 */
	copy_piece(&current_piece, &backup_piece);
     3c8:	81 ea       	ldi	r24, 0xA1	; 161
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	be 01       	movw	r22, r28
     3ce:	6f 5f       	subi	r22, 0xFF	; 255
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <copy_piece>
	/*
	 * Move the piece template left/right, if possible (will only 
	 * fail if the piece is up against the side).
	 */
	if(direction == MOVE_LEFT) {
		if(!move_piece_left(&current_piece)) {
     3d6:	81 ea       	ldi	r24, 0xA1	; 161
     3d8:	91 e0       	ldi	r25, 0x01	; 1
	
	/*
	 * Move the piece template left/right, if possible (will only 
	 * fail if the piece is up against the side).
	 */
	if(direction == MOVE_LEFT) {
     3da:	11 23       	and	r17, r17
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <attempt_move+0x2e>
		if(!move_piece_left(&current_piece)) {
     3de:	0e 94 b7 04 	call	0x96e	; 0x96e <move_piece_left>
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <attempt_move+0x32>
			return 0;
		}
	} else {
		if(!move_piece_right(&current_piece)) {
     3e4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <move_piece_right>
     3e8:	88 23       	and	r24, r24
     3ea:	71 f0       	breq	.+28     	; 0x408 <attempt_move+0x52>
	/* 
	 * If we get here, piece is not at edge.
	 * Check that the board will allow a move (i.e. the pieces
	 * won't overlap).
	 */
	if(piece_overlap(&current_piece, piece_row_num)) {
     3ec:	81 ea       	ldi	r24, 0xA1	; 161
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	60 91 a0 01 	lds	r22, 0x01A0
     3f4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <piece_overlap>
     3f8:	88 23       	and	r24, r24
     3fa:	41 f0       	breq	.+16     	; 0x40c <attempt_move+0x56>
		/*
		 * Current board position does not allow move.
		 * Restore original piece
		 */
		copy_piece(&backup_piece, &current_piece);
     3fc:	ce 01       	movw	r24, r28
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	61 ea       	ldi	r22, 0xA1	; 161
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	0e 94 d5 03 	call	0x7aa	; 0x7aa <copy_piece>
		if(!move_piece_left(&current_piece)) {
			return 0;
		}
	} else {
		if(!move_piece_right(&current_piece)) {
			return 0;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	01 c0       	rjmp	.+2      	; 0x40e <attempt_move+0x58>
		copy_piece(&backup_piece, &current_piece);
		return 0;
	}
	
	/* Move has been made - return success */
	return 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
}
     40e:	26 96       	adiw	r28, 0x06	; 6
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <add_random_piece>:

/*
 * Add random piece, return false (0) if we can't add the piece - this
 * means the game is over.
 */
int8_t add_random_piece(void) {
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	00 d0       	rcall	.+0      	; 0x428 <add_random_piece+0x6>
     428:	00 d0       	rcall	.+0      	; 0x42a <add_random_piece+0x8>
     42a:	00 d0       	rcall	.+0      	; 0x42c <add_random_piece+0xa>
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	current_piece = generate_random_piece();
     430:	0e 94 63 04 	call	0x8c6	; 0x8c6 <generate_random_piece>
     434:	29 83       	std	Y+1, r18	; 0x01
     436:	3a 83       	std	Y+2, r19	; 0x02
     438:	4b 83       	std	Y+3, r20	; 0x03
     43a:	5c 83       	std	Y+4, r21	; 0x04
     43c:	6d 83       	std	Y+5, r22	; 0x05
     43e:	7e 83       	std	Y+6, r23	; 0x06
     440:	a1 ea       	ldi	r26, 0xA1	; 161
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	fe 01       	movw	r30, r28
     446:	31 96       	adiw	r30, 0x01	; 1
     448:	86 e0       	ldi	r24, 0x06	; 6
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	81 50       	subi	r24, 0x01	; 1
     450:	e1 f7       	brne	.-8      	; 0x44a <add_random_piece+0x28>
	 * dimension and come down that many rows).
	 * This allows rotation without worrying
	 * about whether the piece will end up off the top of the 
	 * board or not.
	 */
	if(current_piece.x_dimension > current_piece.y_dimension) {
     452:	20 91 a4 01 	lds	r18, 0x01A4
     456:	90 91 a5 01 	lds	r25, 0x01A5
		piece_row_num = BOARD_ROWS - current_piece.x_dimension;
     45a:	8f e0       	ldi	r24, 0x0F	; 15
	 * dimension and come down that many rows).
	 * This allows rotation without worrying
	 * about whether the piece will end up off the top of the 
	 * board or not.
	 */
	if(current_piece.x_dimension > current_piece.y_dimension) {
     45c:	92 17       	cp	r25, r18
     45e:	10 f4       	brcc	.+4      	; 0x464 <add_random_piece+0x42>
		piece_row_num = BOARD_ROWS - current_piece.x_dimension;
     460:	82 1b       	sub	r24, r18
     462:	01 c0       	rjmp	.+2      	; 0x466 <add_random_piece+0x44>
	} else {
		piece_row_num = BOARD_ROWS - current_piece.y_dimension;
     464:	89 1b       	sub	r24, r25
     466:	80 93 a0 01 	sts	0x01A0, r24
	}
	if(piece_overlap(&current_piece, piece_row_num)) {
     46a:	81 ea       	ldi	r24, 0xA1	; 161
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	60 91 a0 01 	lds	r22, 0x01A0
     472:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <piece_overlap>
     476:	88 23       	and	r24, r24
     478:	29 f0       	breq	.+10     	; 0x484 <add_random_piece+0x62>
		/* Game is over */
		piece_row_num = -1; /* no current piece */
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	80 93 a0 01 	sts	0x01A0, r24
		return 0;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	01 c0       	rjmp	.+2      	; 0x486 <add_random_piece+0x64>
	} else {
		return 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     486:	26 96       	adiw	r28, 0x06	; 6
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <init_external_interrupts>:
#ifdef AVR
	/* Enable the required external interrupts 0 to 3. We set up 
	 * each interrupt to look for a falling edge event.
	 * Global interrupts will also need to be enabled (not done here).
	 */
	EICRA = (1<<ISC31)|(0<<ISC30)|
     498:	8a ea       	ldi	r24, 0xAA	; 170
     49a:	80 93 6a 00 	sts	0x006A, r24
			(1<<ISC21)|(0<<ISC20)|
			(1<<ISC11)|(0<<ISC10)|
			(1<<ISC01)|(0<<ISC00);
	EIMSK = (1<<INT0)|(1<<INT1)|(1<<INT2)|(1<<INT3);
     49e:	8f e0       	ldi	r24, 0x0F	; 15
     4a0:	89 bf       	out	0x39, r24	; 57
	EIFR = (1<<INTF0)|(1<<INTF1)|(1<<INTF2)|(1<<INTF3);	
     4a2:	88 bf       	out	0x38, r24	; 56

#endif
	last_button_pushed = -1;
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
     4a6:	80 93 00 01 	sts	0x0100, r24
}
     4aa:	08 95       	ret

000004ac <button_pushed>:
#ifdef AVR
	int8_t interrupts_enabled;
	int8_t button;
	
	/* Turn off interrupts (if enabled) while we access last_button_pushed */
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     4ac:	9f b7       	in	r25, 0x3f	; 63
	cli();
     4ae:	f8 94       	cli
	button = last_button_pushed;
     4b0:	80 91 00 01 	lds	r24, 0x0100
	last_button_pushed = -1;
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	20 93 00 01 	sts	0x0100, r18
	/* If interrupts were on, turn them back on */
	if(interrupts_enabled) {
     4ba:	97 ff       	sbrs	r25, 7
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <button_pushed+0x14>
		sei();
     4be:	78 94       	sei
	return button;
#else
	/* Non AVR - buttons can never be pressed */
	return -1;
#endif
}
     4c0:	08 95       	ret

000004c2 <__vector_1>:
static void handle_button_push(int8_t button) {
	last_button_pushed = button;
}

/* Interrupt handler for button 0 button push */
ISR(INT0_vect) {
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
#ifdef AVR
/* Called from our button interrupt handlers. (We know that interrupts
 * are disabled when we get here.) We record the button that has been pushed.
 */
static void handle_button_push(int8_t button) {
	last_button_pushed = button;
     4cc:	10 92 00 01 	sts	0x0100, r1
}

/* Interrupt handler for button 0 button push */
ISR(INT0_vect) {
	handle_button_push(0);
}
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <__vector_2>:

/* Interrupt handler for button 1 button push */
ISR(INT1_vect) {
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	8f 93       	push	r24
#ifdef AVR
/* Called from our button interrupt handlers. (We know that interrupts
 * are disabled when we get here.) We record the button that has been pushed.
 */
static void handle_button_push(int8_t button) {
	last_button_pushed = button;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 00 01 	sts	0x0100, r24
}

/* Interrupt handler for button 1 button push */
ISR(INT1_vect) {
	handle_button_push(1);
}
     4ec:	8f 91       	pop	r24
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_3>:

/* Interrupt handler for button 2 button push */
ISR(INT2_vect) {
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	8f 93       	push	r24
#ifdef AVR
/* Called from our button interrupt handlers. (We know that interrupts
 * are disabled when we get here.) We record the button that has been pushed.
 */
static void handle_button_push(int8_t button) {
	last_button_pushed = button;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	80 93 00 01 	sts	0x0100, r24
}

/* Interrupt handler for button 2 button push */
ISR(INT2_vect) {
	handle_button_push(2);
}
     50a:	8f 91       	pop	r24
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_4>:

/* Interrupt handler for button 3 button push */
ISR(INT3_vect) {
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	8f 93       	push	r24
#ifdef AVR
/* Called from our button interrupt handlers. (We know that interrupts
 * are disabled when we get here.) We record the button that has been pushed.
 */
static void handle_button_push(int8_t button) {
	last_button_pushed = button;
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	80 93 00 01 	sts	0x0100, r24
}

/* Interrupt handler for button 3 button push */
ISR(INT3_vect) {
	handle_button_push(3);
}
     528:	8f 91       	pop	r24
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <delay_microsecond>:
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	SPSR  = (1<<SPI2X);
}

static void delay_microsecond(void) {
	asm("nop\r\n" "nop\r\n" "nop\r\n" "nop\r\n"::);
     534:	00 00       	nop
     536:	00 00       	nop
     538:	00 00       	nop
     53a:	00 00       	nop
}
     53c:	08 95       	ret

0000053e <transfer_byte>:
	 * the transfer is complete. (The final read of SPSR
	 * (after the MSB is 1) followed by a read of SPDR will
	 * cause the SPIF bit to be reset to 0. See page 169
	 * of the ATmega64 datasheet.)
	 */
	SPDR = byte;
     53e:	8f b9       	out	0x0f, r24	; 15
	while((SPSR & 0x80) == 0) {
     540:	77 9b       	sbis	0x0e, 7	; 14
     542:	fe cf       	rjmp	.-4      	; 0x540 <transfer_byte+0x2>
		;
	}
	return SPDR;
     544:	8f b1       	in	r24, 0x0f	; 15
}
     546:	08 95       	ret

00000548 <init_joystick>:
void init_joystick(void) {
	/* Set data direction register appropriately. The following
	 * bits are configured to be outputs:
	 * SS, MOSI, SCK (i.e. PB0, PB2, PB1)
	 */
	DDRB |= 0x07;
     548:	87 b3       	in	r24, 0x17	; 23
     54a:	87 60       	ori	r24, 0x07	; 7
     54c:	87 bb       	out	0x17, r24	; 23

	/* Take the slave select line high */
	PORTB |= 0x01;
     54e:	c0 9a       	sbi	0x18, 0	; 24
	 * - MSTR bit = 1 (Enable Master Mode)
	 * - CPOL and CPHA are 0 (SPI mode 0)
	 * - SPR1,SPR0 = 01 with SPI2X = 1 (in SPSR register)
	 *		 (Clock / 8, i.e. 1MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     550:	81 e5       	ldi	r24, 0x51	; 81
     552:	8d b9       	out	0x0d, r24	; 13
	SPSR  = (1<<SPI2X);
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	8e b9       	out	0x0e, r24	; 14
}
     558:	08 95       	ret

0000055a <check_joystick>:
		;
	}
	return SPDR;
}

void check_joystick(uint8_t led1, uint8_t led2) {
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	00 d0       	rcall	.+0      	; 0x56a <check_joystick+0x10>
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	uint8_t Xlow, Xhigh, Ylow, Yhigh;
	uint8_t i;
	uint8_t cmd;

	/* Take SS (slave select) line (bit 0 of port B) low */
	PORTB &= 0xFE;
     56e:	c0 98       	cbi	0x18, 0	; 24
     570:	1f e0       	ldi	r17, 0x0F	; 15

	/* Wait 15 microseconds */
	for(i=0; i<15; i++) {
		delay_microsecond();
     572:	6a 83       	std	Y+2, r22	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	0e 94 9a 02 	call	0x534	; 0x534 <delay_microsecond>
     57a:	11 50       	subi	r17, 0x01	; 1

	/* Take SS (slave select) line (bit 0 of port B) low */
	PORTB &= 0xFE;

	/* Wait 15 microseconds */
	for(i=0; i<15; i++) {
     57c:	6a 81       	ldd	r22, Y+2	; 0x02
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	11 23       	and	r17, r17
     582:	b9 f7       	brne	.-18     	; 0x572 <check_joystick+0x18>
		delay_microsecond();
	}

	/* Construct command word */
	cmd = 0x80;
	if(led1) {
     584:	88 23       	and	r24, r24
     586:	11 f4       	brne	.+4      	; 0x58c <check_joystick+0x32>
	for(i=0; i<15; i++) {
		delay_microsecond();
	}

	/* Construct command word */
	cmd = 0x80;
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	01 c0       	rjmp	.+2      	; 0x58e <check_joystick+0x34>
	if(led1) {
		cmd |= 0x01;
     58c:	81 e8       	ldi	r24, 0x81	; 129
	}
	if(led2) {
     58e:	61 11       	cpse	r22, r1
		cmd |= 0x02;
     590:	82 60       	ori	r24, 0x02	; 2
	}

	Xlow = transfer_byte(cmd);
     592:	0e 94 9f 02 	call	0x53e	; 0x53e <transfer_byte>
     596:	18 2f       	mov	r17, r24
     598:	0a e0       	ldi	r16, 0x0A	; 10

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
		delay_microsecond();
     59a:	0e 94 9a 02 	call	0x534	; 0x534 <delay_microsecond>
     59e:	01 50       	subi	r16, 0x01	; 1
	}

	Xlow = transfer_byte(cmd);

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
     5a0:	e1 f7       	brne	.-8      	; 0x59a <check_joystick+0x40>
		delay_microsecond();
	}

	Xhigh = transfer_byte(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 9f 02 	call	0x53e	; 0x53e <transfer_byte>
     5a8:	08 2f       	mov	r16, r24
     5aa:	2a e0       	ldi	r18, 0x0A	; 10
     5ac:	f2 2e       	mov	r15, r18

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
		delay_microsecond();
     5ae:	0e 94 9a 02 	call	0x534	; 0x534 <delay_microsecond>
     5b2:	fa 94       	dec	r15
	}

	Xhigh = transfer_byte(0);

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <check_joystick+0x54>
		delay_microsecond();
	}

	Ylow = transfer_byte(0);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 9f 02 	call	0x53e	; 0x53e <transfer_byte>
     5bc:	e8 2e       	mov	r14, r24
     5be:	9a e0       	ldi	r25, 0x0A	; 10
     5c0:	f9 2e       	mov	r15, r25

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
		delay_microsecond();
     5c2:	0e 94 9a 02 	call	0x534	; 0x534 <delay_microsecond>
     5c6:	fa 94       	dec	r15
	}

	Ylow = transfer_byte(0);

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <check_joystick+0x68>
		delay_microsecond();
	}

	Yhigh = transfer_byte(0);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 9f 02 	call	0x53e	; 0x53e <transfer_byte>
     5d0:	d8 2e       	mov	r13, r24
     5d2:	8a e0       	ldi	r24, 0x0A	; 10
     5d4:	f8 2e       	mov	r15, r24

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
		delay_microsecond();
     5d6:	0e 94 9a 02 	call	0x534	; 0x534 <delay_microsecond>
     5da:	fa 94       	dec	r15
	}

	Yhigh = transfer_byte(0);

	/* Wait for 10 microseconds */
	for(i=0; i<10; i++) {
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <check_joystick+0x7c>
		delay_microsecond();
	}

	JoystickButtons = transfer_byte(0);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 9f 02 	call	0x53e	; 0x53e <transfer_byte>
     5e4:	80 93 ab 01 	sts	0x01AB, r24

	/* Take SS line high again */
	PORTB |= 0x01;
     5e8:	c0 9a       	sbi	0x18, 0	; 24

	JoystickX = (Xhigh << 8) | Xlow;
     5ea:	50 2f       	mov	r21, r16
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	21 2f       	mov	r18, r17
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	24 2b       	or	r18, r20
     5f4:	35 2b       	or	r19, r21
     5f6:	30 93 a8 01 	sts	0x01A8, r19
     5fa:	20 93 a7 01 	sts	0x01A7, r18
	JoystickY = (Yhigh << 8) | Ylow;
     5fe:	3d 2d       	mov	r19, r13
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	8e 2d       	mov	r24, r14
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	82 2b       	or	r24, r18
     608:	93 2b       	or	r25, r19
     60a:	90 93 aa 01 	sts	0x01AA, r25
     60e:	80 93 a9 01 	sts	0x01A9, r24
}
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	08 95       	ret

00000626 <init_keypad>:
#ifdef AVR
	/* Make the upper 4 bits of port E be outputs.
	 * These are our column lines. We initially drive them
	 * all as 1's. The lower 4 bits are left as inputs.
	 */
	DDRE = 0xF0;
     626:	20 ef       	ldi	r18, 0xF0	; 240
     628:	22 b9       	out	0x02, r18	; 2
	PORTE = 0xF0;
     62a:	23 b9       	out	0x03, r18	; 3

	/* No column is "active" initially. */
	active_column = 0;
     62c:	10 92 7a 01 	sts	0x017A, r1
#endif
	
	/* Store the pointer to the handler we're going to call */
	button_handler = handler_function_ptr;
     630:	90 93 7c 01 	sts	0x017C, r25
     634:	80 93 7b 01 	sts	0x017B, r24
	
	/* No last button pushed */
	last_button_pushed = 0;
     638:	10 92 7d 01 	sts	0x017D, r1
}
     63c:	08 95       	ret

0000063e <check_keypad_column>:
	 * pressed that wasn't previously.
	 */
	static uint8_t row_value_old[5];	/* Indexed by column*/
	uint8_t row, row_value, button_pushed;
	
	if(active_column > 0) {
     63e:	40 91 7a 01 	lds	r20, 0x017A
     642:	44 23       	and	r20, r20
     644:	09 f4       	brne	.+2      	; 0x648 <check_keypad_column+0xa>
     646:	54 c0       	rjmp	.+168    	; 0x6f0 <check_keypad_column+0xb2>
		 * will be 0 if a button has been pushed. (More than one
		 * may be 0 if more than one button has been pushed, but
		 * support for multiple simultaneous button pushes is
		 * not provided.)
		 */
		row_value = ((PIND & (1<<6))>>2) |	/* Pin D6 (row 4) as bit 4 */
     648:	e0 b3       	in	r30, 0x10	; 16
				((PINB & (1<<5))>>2) |		/* Pin B5 (row 3) as bit 3 */
     64a:	66 b3       	in	r22, 0x16	; 22
				((PIND & (1<<4))>>2) |		/* Pin D4 (row 2) as bit 2 */
     64c:	20 b3       	in	r18, 0x10	; 16
				((PINB & (1<<6))>>5);		/* Pin B6 (row 1) as bit 1 */
     64e:	86 b3       	in	r24, 0x16	; 22
		 * may be 0 if more than one button has been pushed, but
		 * support for multiple simultaneous button pushes is
		 * not provided.)
		 */
		row_value = ((PIND & (1<<6))>>2) |	/* Pin D6 (row 4) as bit 4 */
				((PINB & (1<<5))>>2) |		/* Pin B5 (row 3) as bit 3 */
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	60 72       	andi	r22, 0x20	; 32
     654:	70 70       	andi	r23, 0x00	; 0
     656:	75 95       	asr	r23
     658:	67 95       	ror	r22
     65a:	75 95       	asr	r23
     65c:	67 95       	ror	r22
		 * will be 0 if a button has been pushed. (More than one
		 * may be 0 if more than one button has been pushed, but
		 * support for multiple simultaneous button pushes is
		 * not provided.)
		 */
		row_value = ((PIND & (1<<6))>>2) |	/* Pin D6 (row 4) as bit 4 */
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	e0 74       	andi	r30, 0x40	; 64
     662:	f0 70       	andi	r31, 0x00	; 0
     664:	f5 95       	asr	r31
     666:	e7 95       	ror	r30
     668:	f5 95       	asr	r31
     66a:	e7 95       	ror	r30
     66c:	6e 2b       	or	r22, r30
				((PINB & (1<<5))>>2) |		/* Pin B5 (row 3) as bit 3 */
				((PIND & (1<<4))>>2) |		/* Pin D4 (row 2) as bit 2 */
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	20 71       	andi	r18, 0x10	; 16
     672:	30 70       	andi	r19, 0x00	; 0
     674:	35 95       	asr	r19
     676:	27 95       	ror	r18
     678:	35 95       	asr	r19
     67a:	27 95       	ror	r18
		 * will be 0 if a button has been pushed. (More than one
		 * may be 0 if more than one button has been pushed, but
		 * support for multiple simultaneous button pushes is
		 * not provided.)
		 */
		row_value = ((PIND & (1<<6))>>2) |	/* Pin D6 (row 4) as bit 4 */
     67c:	62 2b       	or	r22, r18
				((PINB & (1<<5))>>2) |		/* Pin B5 (row 3) as bit 3 */
				((PIND & (1<<4))>>2) |		/* Pin D4 (row 2) as bit 2 */
				((PINB & (1<<6))>>5);		/* Pin B6 (row 1) as bit 1 */
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	80 74       	andi	r24, 0x40	; 64
     682:	90 70       	andi	r25, 0x00	; 0
     684:	e5 e0       	ldi	r30, 0x05	; 5
     686:	95 95       	asr	r25
     688:	87 95       	ror	r24
     68a:	ea 95       	dec	r30
     68c:	e1 f7       	brne	.-8      	; 0x686 <check_keypad_column+0x48>
		 * will be 0 if a button has been pushed. (More than one
		 * may be 0 if more than one button has been pushed, but
		 * support for multiple simultaneous button pushes is
		 * not provided.)
		 */
		row_value = ((PIND & (1<<6))>>2) |	/* Pin D6 (row 4) as bit 4 */
     68e:	68 2b       	or	r22, r24
				((PINB & (1<<5))>>2) |		/* Pin B5 (row 3) as bit 3 */
				((PIND & (1<<4))>>2) |		/* Pin D4 (row 2) as bit 2 */
				((PINB & (1<<6))>>5);		/* Pin B6 (row 1) as bit 1 */
		if(row_value != row_value_old[active_column]) {
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	da 01       	movw	r26, r20
     694:	a2 58       	subi	r26, 0x82	; 130
     696:	be 4f       	sbci	r27, 0xFE	; 254
     698:	8c 91       	ld	r24, X
     69a:	68 17       	cp	r22, r24
     69c:	49 f1       	breq	.+82     	; 0x6f0 <check_keypad_column+0xb2>
			/* State has changed */
			row_value_old[active_column] = row_value;
     69e:	6c 93       	st	X, r22
			if(row_value != 0x1E) {
     6a0:	6e 31       	cpi	r22, 0x1E	; 30
     6a2:	31 f1       	breq	.+76     	; 0x6f0 <check_keypad_column+0xb2>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
				for(row = 1; row <= 4; row++) {
					/* Extract whether the button is pushed in the given row.
					 * Row 1 is bit 1, row 2 is bit 2, row 3 is bit 3, row 4 is bit 4.
					 * Button is pushed if bit read is 0.
					 */
					button_pushed = !(row_value & (1<<row));
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	9b 01       	movw	r18, r22
     6ac:	08 2e       	mov	r0, r24
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <check_keypad_column+0x76>
     6b0:	35 95       	asr	r19
     6b2:	27 95       	ror	r18
     6b4:	0a 94       	dec	r0
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <check_keypad_column+0x72>
					if(button_pushed) {
     6b8:	20 fd       	sbrc	r18, 0
     6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <check_keypad_column+0xaa>
						/* Button has been pushed so call handler if one was
						 * provided. In any case, we record this as the last 
						 * button pushed.
						 */
						last_button_pushed = keypad_buttons[row][active_column];
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	e8 0f       	add	r30, r24
     6c8:	f9 1f       	adc	r31, r25
     6ca:	e4 0f       	add	r30, r20
     6cc:	f5 1f       	adc	r31, r21
     6ce:	ef 5f       	subi	r30, 0xFF	; 255
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	80 81       	ld	r24, Z
     6d4:	80 93 7d 01 	sts	0x017D, r24
						if(button_handler) {
     6d8:	e0 91 7b 01 	lds	r30, 0x017B
     6dc:	f0 91 7c 01 	lds	r31, 0x017C
     6e0:	30 97       	sbiw	r30, 0x00	; 0
     6e2:	31 f0       	breq	.+12     	; 0x6f0 <check_keypad_column+0xb2>
							(*button_handler)(last_button_pushed);
     6e4:	09 95       	icall
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <check_keypad_column+0xb2>
     6e8:	01 96       	adiw	r24, 0x01	; 1
		if(row_value != row_value_old[active_column]) {
			/* State has changed */
			row_value_old[active_column] = row_value;
			if(row_value != 0x1E) {
				/* Button has been pushed - work out which one. */
				for(row = 1; row <= 4; row++) {
     6ea:	85 30       	cpi	r24, 0x05	; 5
     6ec:	91 05       	cpc	r25, r1
     6ee:	e9 f6       	brne	.-70     	; 0x6aa <check_keypad_column+0x6c>
	}
	
	/* Move on to make the next column active - we'll check it the next time
	 * this function is called.
	 */
	active_column++;
     6f0:	80 91 7a 01 	lds	r24, 0x017A
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	80 93 7a 01 	sts	0x017A, r24
	if(active_column > 4) {
     6fa:	85 30       	cpi	r24, 0x05	; 5
     6fc:	18 f0       	brcs	.+6      	; 0x704 <check_keypad_column+0xc6>
		active_column = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	80 93 7a 01 	sts	0x017A, r24
	}
	
	/* Update the port E output value for the new active column.
	 */
	PORTE = portE_column_strobe_values[active_column];
     704:	e0 91 7a 01 	lds	r30, 0x017A
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	e6 5e       	subi	r30, 0xE6	; 230
     70c:	fe 4f       	sbci	r31, 0xFE	; 254
     70e:	80 81       	ld	r24, Z
     710:	83 b9       	out	0x03, r24	; 3
#endif
}
     712:	08 95       	ret

00000714 <keypad_button_pushed>:
char keypad_button_pushed(void) {
#ifdef AVR
	char c;
	uint8_t interrupts_enabled;
	
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     714:	9f b7       	in	r25, 0x3f	; 63
	cli();
     716:	f8 94       	cli
	c = last_button_pushed;
     718:	80 91 7d 01 	lds	r24, 0x017D
	last_button_pushed = 0;
     71c:	10 92 7d 01 	sts	0x017D, r1
	if(interrupts_enabled) {
     720:	97 ff       	sbrs	r25, 7
     722:	01 c0       	rjmp	.+2      	; 0x726 <keypad_button_pushed+0x12>
		sei();
     724:	78 94       	sei
	 * chew up too much CPU time with busy waiting.
	 */
	usleep(500);
	return 0;
#endif
}
     726:	08 95       	ret

00000728 <init_led_display>:
#ifdef AVR

	/* Set ports A and C to be outputs (except most significant
	 * bit of port C) 
	 */
	DDRA = 0xFF;
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x7F;
     72c:	8f e7       	ldi	r24, 0x7F	; 127
     72e:	84 bb       	out	0x14, r24	; 20

	/* Set 3 least significant bits of G to be outputs */
	DDRG = 0x07;
     730:	87 e0       	ldi	r24, 0x07	; 7
     732:	80 93 64 00 	sts	0x0064, r24
#endif

	/* Empty the display */
	for(i=0; i<NUM_ROWS; i++) {
		display[i] = 0;
     736:	10 92 ad 01 	sts	0x01AD, r1
     73a:	10 92 ac 01 	sts	0x01AC, r1
     73e:	10 92 af 01 	sts	0x01AF, r1
     742:	10 92 ae 01 	sts	0x01AE, r1
     746:	10 92 b1 01 	sts	0x01B1, r1
     74a:	10 92 b0 01 	sts	0x01B0, r1
     74e:	10 92 b3 01 	sts	0x01B3, r1
     752:	10 92 b2 01 	sts	0x01B2, r1
     756:	10 92 b5 01 	sts	0x01B5, r1
     75a:	10 92 b4 01 	sts	0x01B4, r1
     75e:	10 92 b7 01 	sts	0x01B7, r1
     762:	10 92 b6 01 	sts	0x01B6, r1
     766:	10 92 b9 01 	sts	0x01B9, r1
     76a:	10 92 b8 01 	sts	0x01B8, r1
	}
}
     76e:	08 95       	ret

00000770 <display_row>:
	 * from one function execution to the next.)
	 */
	static uint8_t row = 0;

	/* Increment our row number (and wrap around if necessary) */
	if(++row == NUM_ROWS) {
     770:	80 91 83 01 	lds	r24, 0x0183
     774:	8f 5f       	subi	r24, 0xFF	; 255
     776:	80 93 83 01 	sts	0x0183, r24
     77a:	87 30       	cpi	r24, 0x07	; 7
     77c:	11 f4       	brne	.+4      	; 0x782 <display_row+0x12>
		row = 0;
     77e:	10 92 83 01 	sts	0x0183, r1

	/* Output our row number to port G. This assumes the other 
	 * bits of port G are not being used. If they are, then
	 * this line of code needs to be changed.
	 */
	PORTG = row;
     782:	e0 91 83 01 	lds	r30, 0x0183
     786:	e0 93 65 00 	sts	0x0065, r30
	/* Output the correct row data to ports A and C. (Port C gets
	 * the high byte, port A gets the low byte.) We need to invert
	 * the data since we need a low output for the LED to be lit. 
	 * Note - most significant bit is not displayed/used.
	 */
	PORTA = ~(uint8_t)(display[row] & 0xFF);
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	e4 55       	subi	r30, 0x54	; 84
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	80 95       	com	r24
     79a:	8b bb       	out	0x1b, r24	; 27
	PORTC = ~(uint8_t)((display[row] >> 8)& 0x7F);
     79c:	80 81       	ld	r24, Z
     79e:	91 81       	ldd	r25, Z+1	; 0x01
     7a0:	89 2f       	mov	r24, r25
     7a2:	8f 77       	andi	r24, 0x7F	; 127
     7a4:	80 95       	com	r24
     7a6:	85 bb       	out	0x15, r24	; 21
#endif
}
     7a8:	08 95       	ret

000007aa <copy_piece>:
	/* YOUR CODE HERE */ 

	return piece;
}

void copy_piece(piece_type* from, piece_type* to) {
     7aa:	fc 01       	movw	r30, r24
     7ac:	db 01       	movw	r26, r22
	int8_t row;
	for(row=0; row < MAX_PIECE_DIMENSION; row++) {
		to->rowdata[row] = from->rowdata[row];
     7ae:	80 81       	ld	r24, Z
     7b0:	8c 93       	st	X, r24
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
     7b4:	11 96       	adiw	r26, 0x01	; 1
     7b6:	8c 93       	st	X, r24
     7b8:	11 97       	sbiw	r26, 0x01	; 1
     7ba:	82 81       	ldd	r24, Z+2	; 0x02
     7bc:	12 96       	adiw	r26, 0x02	; 2
     7be:	8c 93       	st	X, r24
     7c0:	12 97       	sbiw	r26, 0x02	; 2
	}
	to->x_dimension = from->x_dimension;
     7c2:	83 81       	ldd	r24, Z+3	; 0x03
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	8c 93       	st	X, r24
     7c8:	13 97       	sbiw	r26, 0x03	; 3
	to->y_dimension = from->y_dimension;
     7ca:	84 81       	ldd	r24, Z+4	; 0x04
     7cc:	14 96       	adiw	r26, 0x04	; 4
     7ce:	8c 93       	st	X, r24
     7d0:	14 97       	sbiw	r26, 0x04	; 4
	to->right_column = from->right_column;
     7d2:	85 81       	ldd	r24, Z+5	; 0x05
     7d4:	15 96       	adiw	r26, 0x05	; 5
     7d6:	8c 93       	st	X, r24
     7d8:	15 97       	sbiw	r26, 0x05	; 5
}
     7da:	08 95       	ret

000007dc <rotate_piece>:
 * Returns 1 if successful (and modifies the given piece) otherwise
 * returns 0 (and leaves the given piece unchanged).
 * This method is only unsuccessful if the piece is too close to the
 * left hand side to be rotated.
 */
int8_t rotate_piece(piece_type* piecePtr) {
     7dc:	6f 92       	push	r6
     7de:	7f 92       	push	r7
     7e0:	8f 92       	push	r8
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <rotate_piece+0x1e>
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <rotate_piece+0x20>
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <rotate_piece+0x22>
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	fc 01       	movw	r30, r24
	/*
	 * First check if rotation would cause the piece to be off 
	 * the board. (This only happens if the piece is taller than
	 * it is wide and is too close to the left hand side.)
	 */
	if(piecePtr->right_column + piecePtr->y_dimension > BOARD_WIDTH) {
     804:	35 81       	ldd	r19, Z+5	; 0x05
     806:	c3 2e       	mov	r12, r19
     808:	dd 24       	eor	r13, r13
     80a:	24 81       	ldd	r18, Z+4	; 0x04
     80c:	c6 01       	movw	r24, r12
     80e:	82 0f       	add	r24, r18
     810:	91 1d       	adc	r25, r1
     812:	88 30       	cpi	r24, 0x08	; 8
     814:	91 05       	cpc	r25, r1
     816:	0c f0       	brlt	.+2      	; 0x81a <rotate_piece+0x3e>
     818:	40 c0       	rjmp	.+128    	; 0x89a <rotate_piece+0xbe>
	}
	
	/*
	 * Initialise the rotated piece. (Swap X and Y dimensions.)
	 */
	rotated.x_dimension = piecePtr->y_dimension;
     81a:	2c 83       	std	Y+4, r18	; 0x04
	rotated.y_dimension = piecePtr->x_dimension;
     81c:	63 81       	ldd	r22, Z+3	; 0x03
     81e:	6d 83       	std	Y+5, r22	; 0x05
	rotated.right_column = piecePtr->right_column;
     820:	3e 83       	std	Y+6, r19	; 0x06
	for(row=0; row < MAX_PIECE_DIMENSION; row++) {
		rotated.rowdata[row] = 0;
     822:	19 82       	std	Y+1, r1	; 0x01
     824:	1a 82       	std	Y+2, r1	; 0x02
     826:	1b 82       	std	Y+3, r1	; 0x03
     828:	8f 01       	movw	r16, r30
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	ae 01       	movw	r20, r28
     82e:	4f 5f       	subi	r20, 0xFF	; 255
     830:	5f 4f       	sbci	r21, 0xFF	; 255
 * Returns 1 if successful (and modifies the given piece) otherwise
 * returns 0 (and leaves the given piece unchanged).
 * This method is only unsuccessful if the piece is too close to the
 * left hand side to be rotated.
 */
int8_t rotate_piece(piece_type* piecePtr) {
     832:	46 01       	movw	r8, r12
     834:	84 1a       	sub	r8, r20
     836:	95 0a       	sbc	r9, r21
     838:	1f c0       	rjmp	.+62     	; 0x878 <rotate_piece+0x9c>
	 */
	for(row=0; row < piecePtr->y_dimension; row++) {
		for(col=0; col < piecePtr->x_dimension; col++) {
			new_row = col;
			new_col = piecePtr->y_dimension - 1 - row;
			bit_to_copy = (piecePtr->rowdata[row] >> 
     83a:	d8 01       	movw	r26, r16
     83c:	ec 90       	ld	r14, X
     83e:	ff 24       	eor	r15, r15
 * Returns 1 if successful (and modifies the given piece) otherwise
 * returns 0 (and leaves the given piece unchanged).
 * This method is only unsuccessful if the piece is too close to the
 * left hand side to be rotated.
 */
int8_t rotate_piece(piece_type* piecePtr) {
     840:	c4 01       	movw	r24, r8
     842:	86 0d       	add	r24, r6
     844:	97 1d       	adc	r25, r7
	 */
	for(row=0; row < piecePtr->y_dimension; row++) {
		for(col=0; col < piecePtr->x_dimension; col++) {
			new_row = col;
			new_col = piecePtr->y_dimension - 1 - row;
			bit_to_copy = (piecePtr->rowdata[row] >> 
     846:	02 c0       	rjmp	.+4      	; 0x84c <rotate_piece+0x70>
     848:	f5 94       	asr	r15
     84a:	e7 94       	ror	r14
     84c:	8a 95       	dec	r24
     84e:	e2 f7       	brpl	.-8      	; 0x848 <rotate_piece+0x6c>
     850:	8e 2d       	mov	r24, r14
     852:	81 70       	andi	r24, 0x01	; 1
				(piecePtr->right_column + col)) & 0x01;
			rotated.rowdata[new_row] |= 
				bit_to_copy << (piecePtr->right_column + new_col);
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0a 2c       	mov	r0, r10
     858:	02 c0       	rjmp	.+4      	; 0x85e <rotate_piece+0x82>
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	0a 94       	dec	r0
     860:	e2 f7       	brpl	.-8      	; 0x85a <rotate_piece+0x7e>
		for(col=0; col < piecePtr->x_dimension; col++) {
			new_row = col;
			new_col = piecePtr->y_dimension - 1 - row;
			bit_to_copy = (piecePtr->rowdata[row] >> 
				(piecePtr->right_column + col)) & 0x01;
			rotated.rowdata[new_row] |= 
     862:	d3 01       	movw	r26, r6
     864:	9c 91       	ld	r25, X
     866:	98 2b       	or	r25, r24
     868:	9d 93       	st	X+, r25
     86a:	3d 01       	movw	r6, r26
	 * Iterate over the rows of the existing piece - these
	 * become the columns of the rotated piece. col is a relative
	 * column position (from the rightmost bit of the piece).
	 */
	for(row=0; row < piecePtr->y_dimension; row++) {
		for(col=0; col < piecePtr->x_dimension; col++) {
     86c:	3f 5f       	subi	r19, 0xFF	; 255
     86e:	36 17       	cp	r19, r22
     870:	21 f7       	brne	.-56     	; 0x83a <rotate_piece+0x5e>
     872:	0f 5f       	subi	r16, 0xFF	; 255
     874:	1f 4f       	sbci	r17, 0xFF	; 255
     876:	21 50       	subi	r18, 0x01	; 1
	/*
	 * Iterate over the rows of the existing piece - these
	 * become the columns of the rotated piece. col is a relative
	 * column position (from the rightmost bit of the piece).
	 */
	for(row=0; row < piecePtr->y_dimension; row++) {
     878:	2f 3f       	cpi	r18, 0xFF	; 255
     87a:	49 f0       	breq	.+18     	; 0x88e <rotate_piece+0xb2>
     87c:	3a 01       	movw	r6, r20
 * Returns 1 if successful (and modifies the given piece) otherwise
 * returns 0 (and leaves the given piece unchanged).
 * This method is only unsuccessful if the piece is too close to the
 * left hand side to be rotated.
 */
int8_t rotate_piece(piece_type* piecePtr) {
     87e:	30 e0       	ldi	r19, 0x00	; 0
			new_row = col;
			new_col = piecePtr->y_dimension - 1 - row;
			bit_to_copy = (piecePtr->rowdata[row] >> 
				(piecePtr->right_column + col)) & 0x01;
			rotated.rowdata[new_row] |= 
				bit_to_copy << (piecePtr->right_column + new_col);
     880:	a2 2e       	mov	r10, r18
     882:	bb 24       	eor	r11, r11
     884:	a7 fc       	sbrc	r10, 7
     886:	b0 94       	com	r11
     888:	ac 0c       	add	r10, r12
     88a:	bd 1c       	adc	r11, r13
     88c:	f0 cf       	rjmp	.-32     	; 0x86e <rotate_piece+0x92>
	}

	/*
	 * Copy rotated data to original piece
	 */
	copy_piece(&rotated, piecePtr);
     88e:	ca 01       	movw	r24, r20
     890:	bf 01       	movw	r22, r30
     892:	0e 94 d5 03 	call	0x7aa	; 0x7aa <copy_piece>
	
	/* Indicate success */
	return 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	01 c0       	rjmp	.+2      	; 0x89c <rotate_piece+0xc0>
	 * First check if rotation would cause the piece to be off 
	 * the board. (This only happens if the piece is taller than
	 * it is wide and is too close to the left hand side.)
	 */
	if(piecePtr->right_column + piecePtr->y_dimension > BOARD_WIDTH) {
		return 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
	 */
	copy_piece(&rotated, piecePtr);
	
	/* Indicate success */
	return 1;
}
     89c:	26 96       	adiw	r28, 0x06	; 6
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	7f 90       	pop	r7
     8c2:	6f 90       	pop	r6
     8c4:	08 95       	ret

000008c6 <generate_random_piece>:
 * __*_ = 0010 = 0x02
 * _*** = 0111 = 0x07
 */
	
	
piece_type generate_random_piece(void) {
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	2c 97       	sbiw	r28, 0x0c	; 12
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
	piece_type piece;
	int8_t i;
	int piece_num = rand() % NUM_PIECES_IN_LIBRARY;
     8e2:	0e 94 88 09 	call	0x1310	; 0x1310 <rand>
     8e6:	65 e0       	ldi	r22, 0x05	; 5
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	0e 94 cf 08 	call	0x119e	; 0x119e <__divmodhi4>
	piece = piece_library[piece_num];
     8ee:	fc 01       	movw	r30, r24
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e8 0f       	add	r30, r24
     8f6:	f9 1f       	adc	r31, r25
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	de 01       	movw	r26, r28
     8fe:	17 96       	adiw	r26, 0x07	; 7
     900:	e1 5e       	subi	r30, 0xE1	; 225
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	81 50       	subi	r24, 0x01	; 1
     90c:	e1 f7       	brne	.-8      	; 0x906 <generate_random_piece+0x40>
	/* 
	 * Rotate the piece 0, 90, 180 or 270 degrees - i.e. perform
	 * 0 to 3 rotations  - generate a random number between 0
	 * and 3 inclusive
	 */
	int num_rotations = rand() % 4;
     90e:	0e 94 88 09 	call	0x1310	; 0x1310 <rand>
     912:	64 e0       	ldi	r22, 0x04	; 4
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0e 94 cf 08 	call	0x119e	; 0x119e <__divmodhi4>
     91a:	7c 01       	movw	r14, r24
	for(i=0; i < num_rotations; i++) {
     91c:	00 e0       	ldi	r16, 0x00	; 0
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	06 c0       	rjmp	.+12     	; 0x92e <generate_random_piece+0x68>
		(void)rotate_piece(&piece);
     922:	ce 01       	movw	r24, r28
     924:	07 96       	adiw	r24, 0x07	; 7
     926:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rotate_piece>
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
	 * Rotate the piece 0, 90, 180 or 270 degrees - i.e. perform
	 * 0 to 3 rotations  - generate a random number between 0
	 * and 3 inclusive
	 */
	int num_rotations = rand() % 4;
	for(i=0; i < num_rotations; i++) {
     92e:	0e 15       	cp	r16, r14
     930:	1f 05       	cpc	r17, r15
     932:	bc f3       	brlt	.-18     	; 0x922 <generate_random_piece+0x5c>
	 * piece.right_column
	 */
	
	/* YOUR CODE HERE */ 

	return piece;
     934:	de 01       	movw	r26, r28
     936:	11 96       	adiw	r26, 0x01	; 1
     938:	fe 01       	movw	r30, r28
     93a:	37 96       	adiw	r30, 0x07	; 7
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	01 90       	ld	r0, Z+
     940:	0d 92       	st	X+, r0
     942:	81 50       	subi	r24, 0x01	; 1
     944:	e1 f7       	brne	.-8      	; 0x93e <generate_random_piece+0x78>
     946:	29 81       	ldd	r18, Y+1	; 0x01
     948:	3a 81       	ldd	r19, Y+2	; 0x02
     94a:	4b 81       	ldd	r20, Y+3	; 0x03
     94c:	5c 81       	ldd	r21, Y+4	; 0x04
     94e:	6d 81       	ldd	r22, Y+5	; 0x05
     950:	7e 81       	ldd	r23, Y+6	; 0x06
}
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	2c 96       	adiw	r28, 0x0c	; 12
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	08 95       	ret

0000096e <move_piece_left>:
	
	/* Indicate success */
	return 1;
}

int8_t move_piece_left(piece_type* piecePtr) {
     96e:	fc 01       	movw	r30, r24
	/*
	 * Check if piece is all the way to the left If so, return.
	 * (Remember, column number is based on bit position - higher
	 * numbers to the left.
	 */
	if(piecePtr->right_column + piecePtr->x_dimension >= BOARD_WIDTH) {
     970:	25 81       	ldd	r18, Z+5	; 0x05
     972:	83 81       	ldd	r24, Z+3	; 0x03
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	82 0f       	add	r24, r18
     978:	91 1d       	adc	r25, r1
     97a:	87 30       	cpi	r24, 0x07	; 7
     97c:	91 05       	cpc	r25, r1
     97e:	74 f4       	brge	.+28     	; 0x99c <move_piece_left+0x2e>
     980:	df 01       	movw	r26, r30
	
	/* Indicate success */
	return 1;
}

int8_t move_piece_left(piece_type* piecePtr) {
     982:	34 81       	ldd	r19, Z+4	; 0x04
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <move_piece_left+0x22>
		
	/*
	 * Make the move.
	 */
	for(row=0; row < piecePtr->y_dimension; row++) {
		piecePtr->rowdata[row] <<= 1;
     988:	9c 91       	ld	r25, X
     98a:	99 0f       	add	r25, r25
     98c:	9d 93       	st	X+, r25
	}
		
	/*
	 * Make the move.
	 */
	for(row=0; row < piecePtr->y_dimension; row++) {
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	83 17       	cp	r24, r19
     992:	d1 f7       	brne	.-12     	; 0x988 <move_piece_left+0x1a>
		piecePtr->rowdata[row] <<= 1;
	}
	piecePtr->right_column++;
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	25 83       	std	Z+5, r18	; 0x05
	return 1;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 95       	ret
	 * Check if piece is all the way to the left If so, return.
	 * (Remember, column number is based on bit position - higher
	 * numbers to the left.
	 */
	if(piecePtr->right_column + piecePtr->x_dimension >= BOARD_WIDTH) {
		return 0;
     99c:	80 e0       	ldi	r24, 0x00	; 0
	for(row=0; row < piecePtr->y_dimension; row++) {
		piecePtr->rowdata[row] <<= 1;
	}
	piecePtr->right_column++;
	return 1;
}
     99e:	08 95       	ret

000009a0 <move_piece_right>:
	
	/*
	 * Initially, this function does nothing so we return 0
	 */
	return 0;
}
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret

000009a4 <timer_activities>:
/* Function to be called on every interrupt of timer 2 (every ms). Note that
 * interrupts are still disabled when this function is called.
 */
void timer_activities(void) {
	/* Update our LED display */
	display_row();
     9a4:	0e 94 b8 03 	call	0x770	; 0x770 <display_row>
	
	/* Check the next column of our keypad for any button pushes. */
	check_keypad_column();
     9a8:	0e 94 1f 03 	call	0x63e	; 0x63e <check_keypad_column>
}
     9ac:	08 95       	ret

000009ae <new_game>:

void new_game(void) {
	/* 
	 * Initialise the board, and display it. 
	 */
	init_board();
     9ae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <init_board>
	copy_board_to_led_display();
     9b2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <copy_board_to_led_display>
	
	/* Initialise the score module */
	init_score();
     9b6:	0e 94 c9 05 	call	0xb92	; 0xb92 <init_score>
	
	/* Clear any button pushes and serial input. The (void) cast
	 * indicates that we are discarding the return value.
	 */
	(void)button_pushed();
     9ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <button_pushed>
	(void)keypad_button_pushed();
     9be:	0e 94 8a 03 	call	0x714	; 0x714 <keypad_button_pushed>
	clear_serial_input_buffer();
     9c2:	0e 94 1c 07 	call	0xe38	; 0xe38 <clear_serial_input_buffer>
}
     9c6:	08 95       	ret

000009c8 <play_game>:

/* Play the game */
void play_game(void) {
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	cf 93       	push	r28
	char input;
	
	/* Event loop that waits for various times to be reached and whether
	 * various button events have happened.
	 */	
	current_time = get_clock_ticks();
     9da:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_clock_ticks>
	last_piece_drop_time = current_time;
     9de:	4b 01       	movw	r8, r22
     9e0:	5c 01       	movw	r10, r24
	while(1) {
		/* We know board_updated is 0 at this point */
		current_time = get_clock_ticks();
     9e2:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_clock_ticks>
     9e6:	6b 01       	movw	r12, r22
     9e8:	7c 01       	movw	r14, r24
		if(current_time >= last_piece_drop_time + 1000) {
     9ea:	d5 01       	movw	r26, r10
     9ec:	c4 01       	movw	r24, r8
     9ee:	88 51       	subi	r24, 0x18	; 24
     9f0:	9c 4f       	sbci	r25, 0xFC	; 252
     9f2:	af 4f       	sbci	r26, 0xFF	; 255
     9f4:	bf 4f       	sbci	r27, 0xFF	; 255
     9f6:	c8 16       	cp	r12, r24
     9f8:	d9 06       	cpc	r13, r25
     9fa:	ea 06       	cpc	r14, r26
     9fc:	fb 06       	cpc	r15, r27
     9fe:	a8 f0       	brcs	.+42     	; 0xa2a <play_game+0x62>
			/* Drop a piece every 1000ms. */
			if(have_current_piece()) {
     a00:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <have_current_piece>
     a04:	88 23       	and	r24, r24
     a06:	51 f0       	breq	.+20     	; 0xa1c <play_game+0x54>
				/* Attempt to drop piece by 1 row */
				board_updated = attempt_drop_piece_one_row();
     a08:	0e 94 c7 01 	call	0x38e	; 0x38e <attempt_drop_piece_one_row>
     a0c:	c8 2f       	mov	r28, r24
				if(!board_updated) {
     a0e:	88 23       	and	r24, r24
     a10:	71 f4       	brne	.+28     	; 0xa2e <play_game+0x66>
					/* Couldn't drop piece - add to board */
					fix_piece_to_board();
     a12:	0e 94 63 01 	call	0x2c6	; 0x2c6 <fix_piece_to_board>
     a16:	46 01       	movw	r8, r12
     a18:	57 01       	movw	r10, r14
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <play_game+0x5e>
					board_updated = 1;
				}
				last_piece_drop_time = current_time;
			} else {
				/* No current piece - add one */
				if(add_random_piece()) {
     a1c:	0e 94 11 02 	call	0x422	; 0x422 <add_random_piece>
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <play_game+0x5e>
     a24:	51 c0       	rjmp	.+162    	; 0xac8 <play_game+0x100>
					/* Addition of piece succeeded */
					board_updated = 1;
     a26:	c1 e0       	ldi	r28, 0x01	; 1
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <play_game+0x6a>
	current_time = get_clock_ticks();
	last_piece_drop_time = current_time;
	while(1) {
		/* We know board_updated is 0 at this point */
		current_time = get_clock_ticks();
		if(current_time >= last_piece_drop_time + 1000) {
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <play_game+0x6a>
			/* Drop a piece every 1000ms. */
			if(have_current_piece()) {
				/* Attempt to drop piece by 1 row */
				board_updated = attempt_drop_piece_one_row();
				if(!board_updated) {
     a2e:	46 01       	movw	r8, r12
     a30:	57 01       	movw	r10, r14
				}				
			}
		}
		
		/* Check for button pushes and/or serial input. */
		input = keypad_button_pushed();
     a32:	0e 94 8a 03 	call	0x714	; 0x714 <keypad_button_pushed>
		if(!input) {
     a36:	88 23       	and	r24, r24
     a38:	61 f4       	brne	.+24     	; 0xa52 <play_game+0x8a>
			input = button_pushed();
     a3a:	0e 94 56 02 	call	0x4ac	; 0x4ac <button_pushed>
			if(input >= 0 && input <= 3) {
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	d8 f5       	brcc	.+118    	; 0xab8 <play_game+0xf0>
				/* Button was pushed (0 to 3) - turn these into lower case
				 * characters, i.e. 0 to 'a', 1 to 'b' etc.
				 */
				input += 97;	/* ASCII code for 'a' */
     a42:	8f 59       	subi	r24, 0x9F	; 159
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <play_game+0x8a>
		if(!input && serial_input_available()) {
			/* No keypad or push button was pushed, but serial input is
			 * available. Fetch it. We can use the serial port
			 * to emulate the push buttons etc below.
			 */
			input = fgetc(stdin);
     a46:	80 91 d0 02 	lds	r24, 0x02D0
     a4a:	90 91 d1 02 	lds	r25, 0x02D1
     a4e:	0e 94 98 09 	call	0x1330	; 0x1330 <fgetc>
		}
		switch(input) {
     a52:	81 33       	cpi	r24, 0x31	; 49
     a54:	91 f0       	breq	.+36     	; 0xa7a <play_game+0xb2>
     a56:	82 33       	cpi	r24, 0x32	; 50
     a58:	18 f4       	brcc	.+6      	; 0xa60 <play_game+0x98>
     a5a:	80 33       	cpi	r24, 0x30	; 48
     a5c:	39 f5       	brne	.+78     	; 0xaac <play_game+0xe4>
     a5e:	1e c0       	rjmp	.+60     	; 0xa9c <play_game+0xd4>
     a60:	81 34       	cpi	r24, 0x41	; 65
     a62:	19 f0       	breq	.+6      	; 0xa6a <play_game+0xa2>
     a64:	84 34       	cpi	r24, 0x44	; 68
     a66:	11 f5       	brne	.+68     	; 0xaac <play_game+0xe4>
     a68:	13 c0       	rjmp	.+38     	; 0xa90 <play_game+0xc8>
			case 'A':	/* Keypad 'A' */
				/* Attempt to rotate the current piece */
				if(have_current_piece()) {
     a6a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <have_current_piece>
     a6e:	88 23       	and	r24, r24
     a70:	e9 f0       	breq	.+58     	; 0xaac <play_game+0xe4>
					board_updated |= attempt_rotation();
     a72:	0e 94 99 01 	call	0x332	; 0x332 <attempt_rotation>
     a76:	c8 2b       	or	r28, r24
     a78:	19 c0       	rjmp	.+50     	; 0xaac <play_game+0xe4>
				}
				break;
			case '1':	/* Keypad '1' */
				/* Attempt to drop the piece by one row */
				if(have_current_piece()) {
     a7a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <have_current_piece>
     a7e:	88 23       	and	r24, r24
     a80:	a9 f0       	breq	.+42     	; 0xaac <play_game+0xe4>
					if(!attempt_drop_piece_one_row()) {
     a82:	0e 94 c7 01 	call	0x38e	; 0x38e <attempt_drop_piece_one_row>
     a86:	88 23       	and	r24, r24
     a88:	e1 f4       	brne	.+56     	; 0xac2 <play_game+0xfa>
						fix_piece_to_board();
     a8a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <fix_piece_to_board>
     a8e:	19 c0       	rjmp	.+50     	; 0xac2 <play_game+0xfa>
					last_piece_drop_time = current_time;
				}				
				break;
			case 'D':	/* Keypad 'D' */
				/* Attempt a move to the right */
				if(have_current_piece()) {
     a90:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <have_current_piece>
     a94:	88 23       	and	r24, r24
     a96:	51 f0       	breq	.+20     	; 0xaac <play_game+0xe4>
					board_updated = attempt_move(MOVE_RIGHT);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <play_game+0xde>
				}				
				break;
			case '0':	/* Keypad '0' */
				/* Attempt a move to the left */
				if(have_current_piece()) {
     a9c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <have_current_piece>
     aa0:	88 23       	and	r24, r24
     aa2:	21 f0       	breq	.+8      	; 0xaac <play_game+0xe4>
					board_updated = attempt_move(MOVE_LEFT);
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <attempt_move>
     aaa:	c8 2f       	mov	r28, r24
			default:
				/* Ignore other button pushes or null event. */
				break;				
		}
		
		if(board_updated) {
     aac:	cc 23       	and	r28, r28
     aae:	09 f4       	brne	.+2      	; 0xab2 <play_game+0xea>
     ab0:	98 cf       	rjmp	.-208    	; 0x9e2 <play_game+0x1a>
			/* Update display of board since its appearance has changed. */
			copy_board_to_led_display();
     ab2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <copy_board_to_led_display>
     ab6:	95 cf       	rjmp	.-214    	; 0x9e2 <play_game+0x1a>
			} else {
				/* No button was pushed */
				input = 0;
			}
		}
		if(!input && serial_input_available()) {
     ab8:	0e 94 15 07 	call	0xe2a	; 0xe2a <serial_input_available>
     abc:	88 23       	and	r24, r24
     abe:	b1 f3       	breq	.-20     	; 0xaac <play_game+0xe4>
     ac0:	c2 cf       	rjmp	.-124    	; 0xa46 <play_game+0x7e>
	 */	
	current_time = get_clock_ticks();
	last_piece_drop_time = current_time;
	while(1) {
		/* We know board_updated is 0 at this point */
		current_time = get_clock_ticks();
     ac2:	46 01       	movw	r8, r12
     ac4:	57 01       	movw	r10, r14
     ac6:	f5 cf       	rjmp	.-22     	; 0xab2 <play_game+0xea>
			/* Update display of board since its appearance has changed. */
			copy_board_to_led_display();
			board_updated = 0;
		}
	}
}
     ac8:	cf 91       	pop	r28
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	bf 90       	pop	r11
     ad4:	af 90       	pop	r10
     ad6:	9f 90       	pop	r9
     ad8:	8f 90       	pop	r8
     ada:	08 95       	ret

00000adc <handle_game_over>:

/* Handle the game being over. By default - pause forever. */
void handle_game_over(void) {
     adc:	ff cf       	rjmp	.-2      	; 0xadc <handle_game_over>

00000ade <initialise_hardware>:
	/* Initialise hardware modules (interrupts, data direction
	 * registers etc. This should only need to be done once.
	 */
	
	/* Initialise serial IO - baud rate of 19200 and no echo */
	init_serial_stdio(19200, 0);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	7b e4       	ldi	r23, 0x4B	; 75
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_serial_stdio>

	/* Initialise the LED board display */
	init_led_display();
     aec:	0e 94 94 03 	call	0x728	; 0x728 <init_led_display>
	
	/* Initialise the keypad. We don't provide a handler, we'll
	 * rely on asking the keypad module for the last button pushed.
	 */
	init_keypad(NULL);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 13 03 	call	0x626	; 0x626 <init_keypad>

	/* Initialise the timer which gives us clock ticks
	 * to time things by. We specify that the timer_activities()
	 * function above should be called on every interrupt.
	 */
	init_timer2(timer_activities);
     af8:	82 ed       	ldi	r24, 0xD2	; 210
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <init_timer2>
	
	/* Initialise our external button interrupts */
	init_external_interrupts();
     b00:	0e 94 4c 02 	call	0x498	; 0x498 <init_external_interrupts>
	
	/*
	 * Turn on interrupts (needed for timer, serialIO etc. to work)
	 */
	sei();
     b04:	78 94       	sei
}
     b06:	08 95       	ret

00000b08 <splash_screen>:

void splash_screen(void) {
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
	uint32_t currentTime;
	uint32_t displayLastScrolledTime = 0;
	
	/* Display a message on the serial terminal */
	clear_terminal();
     b18:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <clear_terminal>
	move_cursor(10,12);
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	6c e0       	ldi	r22, 0x0C	; 12
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 ae 07 	call	0xf5c	; 0xf5c <move_cursor>
	printf("TETRIS - CSSE2010/CSSE7201 Project\n");
     b28:	8d e3       	ldi	r24, 0x3D	; 61
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 02 0a 	call	0x1404	; 0x1404 <puts>

	/* This is the text we'll scroll on the LED display. */
	set_scrolling_display_text("Tetris");
     b30:	80 e6       	ldi	r24, 0x60	; 96
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 de 05 	call	0xbbc	; 0xbbc <set_scrolling_display_text>
	sei();
}

void splash_screen(void) {
	uint32_t currentTime;
	uint32_t displayLastScrolledTime = 0;
     b38:	88 24       	eor	r8, r8
     b3a:	99 24       	eor	r9, r9
     b3c:	54 01       	movw	r10, r8

	/* We scroll the message until the display is blank or a keypad button
	 * is pushed or a push button is pushed.
	 */
	while(1) {
		currentTime = get_clock_ticks();
     b3e:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_clock_ticks>
     b42:	6b 01       	movw	r12, r22
     b44:	7c 01       	movw	r14, r24
		
		if(currentTime >= displayLastScrolledTime + 150) {
     b46:	d5 01       	movw	r26, r10
     b48:	c4 01       	movw	r24, r8
     b4a:	8a 56       	subi	r24, 0x6A	; 106
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	af 4f       	sbci	r26, 0xFF	; 255
     b50:	bf 4f       	sbci	r27, 0xFF	; 255
     b52:	c8 16       	cp	r12, r24
     b54:	d9 06       	cpc	r13, r25
     b56:	ea 06       	cpc	r14, r26
     b58:	fb 06       	cpc	r15, r27
     b5a:	30 f0       	brcs	.+12     	; 0xb68 <splash_screen+0x60>
			/* Scroll our message every 150ms. Exit the loop
			 * if finished (scroll_display() returns 0).
			*/
			if(scroll_display() == 0) {
     b5c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <scroll_display>
     b60:	88 23       	and	r24, r24
     b62:	71 f0       	breq	.+28     	; 0xb80 <splash_screen+0x78>
     b64:	46 01       	movw	r8, r12
     b66:	57 01       	movw	r10, r14
				break;
			}
			displayLastScrolledTime = currentTime;
		}
		if(button_pushed() != -1 || keypad_button_pushed() != 0 || 
     b68:	0e 94 56 02 	call	0x4ac	; 0x4ac <button_pushed>
     b6c:	8f 3f       	cpi	r24, 0xFF	; 255
     b6e:	41 f4       	brne	.+16     	; 0xb80 <splash_screen+0x78>
     b70:	0e 94 8a 03 	call	0x714	; 0x714 <keypad_button_pushed>
     b74:	88 23       	and	r24, r24
     b76:	21 f4       	brne	.+8      	; 0xb80 <splash_screen+0x78>
				serial_input_available()) {
     b78:	0e 94 15 07 	call	0xe2a	; 0xe2a <serial_input_available>
			if(scroll_display() == 0) {
				break;
			}
			displayLastScrolledTime = currentTime;
		}
		if(button_pushed() != -1 || keypad_button_pushed() != 0 || 
     b7c:	88 23       	and	r24, r24
     b7e:	f9 f2       	breq	.-66     	; 0xb3e <splash_screen+0x36>
			 * showing our splash screen.
			 */
			break;
		}
	}		
}
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	08 95       	ret

00000b92 <init_score>:
#include "score.h"

uint16_t score;

void init_score(void) {
	score = 0;
     b92:	10 92 bb 01 	sts	0x01BB, r1
     b96:	10 92 ba 01 	sts	0x01BA, r1
}
     b9a:	08 95       	ret

00000b9c <add_to_score>:

void add_to_score(uint16_t value) {
	score += value;
     b9c:	20 91 ba 01 	lds	r18, 0x01BA
     ba0:	30 91 bb 01 	lds	r19, 0x01BB
     ba4:	28 0f       	add	r18, r24
     ba6:	39 1f       	adc	r19, r25
     ba8:	30 93 bb 01 	sts	0x01BB, r19
     bac:	20 93 ba 01 	sts	0x01BA, r18
}
     bb0:	08 95       	ret

00000bb2 <get_score>:

uint16_t get_score(void) {
	return score;
}
     bb2:	80 91 ba 01 	lds	r24, 0x01BA
     bb6:	90 91 bb 01 	lds	r25, 0x01BB
     bba:	08 95       	ret

00000bbc <set_scrolling_display_text>:
 * pointer not the string it points to, so it is important
 * that the original string not change after this function
 * is called while the string is still being displayed.
 */
void set_scrolling_display_text(char* string_to_display) {
	displayString = string_to_display;
     bbc:	90 93 85 01 	sts	0x0185, r25
     bc0:	80 93 84 01 	sts	0x0184, r24
}
     bc4:	08 95       	ret

00000bc6 <scroll_display>:
 * frequently than display_row() is called. Note that this
 * can be called from an interrupt service routine so any
 * global variables accessed should be declared "volatile".
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
	 * column data corresponds to row 0 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     bca:	e0 91 86 01 	lds	r30, 0x0186
     bce:	f0 91 87 01 	lds	r31, 0x0187
     bd2:	30 97       	sbiw	r30, 0x00	; 0
     bd4:	79 f0       	breq	.+30     	; 0xbf4 <scroll_display+0x2e>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     bd6:	a4 91       	lpm	r26, Z

		if(col_data & 1) {
     bd8:	a0 ff       	sbrs	r26, 0
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <scroll_display+0x20>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     bdc:	10 92 87 01 	sts	0x0187, r1
     be0:	10 92 86 01 	sts	0x0186, r1
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <scroll_display+0x2a>
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     be6:	31 96       	adiw	r30, 0x01	; 1
     be8:	f0 93 87 01 	sts	0x0187, r31
     bec:	e0 93 86 01 	sts	0x0186, r30
 */
uint8_t scroll_display(void) {
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	4a c0       	rjmp	.+148    	; 0xc88 <scroll_display+0xc2>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     bf4:	a0 91 88 01 	lds	r26, 0x0188
     bf8:	b0 91 89 01 	lds	r27, 0x0189
     bfc:	10 97       	sbiw	r26, 0x00	; 0
     bfe:	81 f1       	breq	.+96     	; 0xc60 <scroll_display+0x9a>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     c00:	ed 91       	ld	r30, X+
     c02:	b0 93 89 01 	sts	0x0189, r27
     c06:	a0 93 88 01 	sts	0x0188, r26
		if(next_char == 0) {
     c0a:	ee 23       	and	r30, r30
     c0c:	29 f4       	brne	.+10     	; 0xc18 <scroll_display+0x52>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character.
			 */
			next_char_to_display = 0;
     c0e:	10 92 89 01 	sts	0x0189, r1
     c12:	10 92 88 01 	sts	0x0188, r1
     c16:	36 c0       	rjmp	.+108    	; 0xc84 <scroll_display+0xbe>
		} else if (next_char >= 'a' && next_char <= 'z') {
     c18:	8e 2f       	mov	r24, r30
     c1a:	81 56       	subi	r24, 0x61	; 97
     c1c:	8a 31       	cpi	r24, 0x1A	; 26
     c1e:	30 f4       	brcc	.+12     	; 0xc2c <scroll_display+0x66>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	e6 53       	subi	r30, 0x36	; 54
     c28:	f0 40       	sbci	r31, 0x00	; 0
     c2a:	13 c0       	rjmp	.+38     	; 0xc52 <scroll_display+0x8c>
		} else if (next_char >= 'A' && next_char <= 'Z') {
     c2c:	8e 2f       	mov	r24, r30
     c2e:	81 54       	subi	r24, 0x41	; 65
     c30:	8a 31       	cpi	r24, 0x1A	; 26
     c32:	30 f4       	brcc	.+12     	; 0xc40 <scroll_display+0x7a>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e6 5f       	subi	r30, 0xF6	; 246
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	09 c0       	rjmp	.+18     	; 0xc52 <scroll_display+0x8c>
		} else if (next_char >= '0' && next_char <= '9') {
     c40:	8e 2f       	mov	r24, r30
     c42:	80 53       	subi	r24, 0x30	; 48
     c44:	8a 30       	cpi	r24, 0x0A	; 10
     c46:	f0 f4       	brcc	.+60     	; 0xc84 <scroll_display+0xbe>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	e0 5a       	subi	r30, 0xA0	; 160
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	85 91       	lpm	r24, Z+
     c54:	94 91       	lpm	r25, Z
     c56:	80 93 86 01 	sts	0x0186, r24
     c5a:	90 93 87 01 	sts	0x0187, r25
     c5e:	12 c0       	rjmp	.+36     	; 0xc84 <scroll_display+0xbe>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!displayString) {
     c60:	20 91 84 01 	lds	r18, 0x0184
     c64:	30 91 85 01 	lds	r19, 0x0185
 */
uint8_t scroll_display(void) {
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	21 15       	cp	r18, r1
     c6c:	31 05       	cpc	r19, r1
     c6e:	09 f0       	breq	.+2      	; 0xc72 <scroll_display+0xac>
     c70:	80 e0       	ldi	r24, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = displayString;
     c72:	30 93 89 01 	sts	0x0189, r19
     c76:	20 93 88 01 	sts	0x0188, r18
		displayString = 0;
     c7a:	10 92 85 01 	sts	0x0185, r1
     c7e:	10 92 84 01 	sts	0x0184, r1
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <scroll_display+0xc0>
 */
uint8_t scroll_display(void) {
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     c84:	80 e0       	ldi	r24, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 0 of the display
	 * etc.
	 */
	col_data = 0;
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
	 * displayed on the left, means the display moves one position to
	 * the left). Adjust our finished variable - if we set it true above
	 * it will remain true provided all pixels are off.
	 */
	for(i=0; i<NUM_ROWS; i++) {
		display[i] = (display[i] >> 1) | ((col_data << (i+NUM_ROWS))&0x4000);
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	fb 01       	movw	r30, r22
     c90:	ee 0f       	add	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	e4 55       	subi	r30, 0x54	; 84
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	40 81       	ld	r20, Z
     c9a:	51 81       	ldd	r21, Z+1	; 0x01
 * frequently than display_row() is called. Note that this
 * can be called from an interrupt service routine so any
 * global variables accessed should be declared "volatile".
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     c9c:	9b 01       	movw	r18, r22
     c9e:	29 5f       	subi	r18, 0xF9	; 249
     ca0:	3f 4f       	sbci	r19, 0xFF	; 255
	 * displayed on the left, means the display moves one position to
	 * the left). Adjust our finished variable - if we set it true above
	 * it will remain true provided all pixels are off.
	 */
	for(i=0; i<NUM_ROWS; i++) {
		display[i] = (display[i] >> 1) | ((col_data << (i+NUM_ROWS))&0x4000);
     ca2:	ed 01       	movw	r28, r26
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <scroll_display+0xe4>
     ca6:	cc 0f       	add	r28, r28
     ca8:	dd 1f       	adc	r29, r29
     caa:	2a 95       	dec	r18
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <scroll_display+0xe0>
     cae:	9e 01       	movw	r18, r28
     cb0:	20 70       	andi	r18, 0x00	; 0
     cb2:	30 74       	andi	r19, 0x40	; 64
     cb4:	56 95       	lsr	r21
     cb6:	47 95       	ror	r20
     cb8:	24 2b       	or	r18, r20
     cba:	35 2b       	or	r19, r21
     cbc:	31 83       	std	Z+1, r19	; 0x01
     cbe:	20 83       	st	Z, r18
		finished = finished && (display[i] == 0);
     cc0:	88 23       	and	r24, r24
     cc2:	39 f0       	breq	.+14     	; 0xcd2 <scroll_display+0x10c>
     cc4:	20 81       	ld	r18, Z
     cc6:	31 81       	ldd	r19, Z+1	; 0x01
 * frequently than display_row() is called. Note that this
 * can be called from an interrupt service routine so any
 * global variables accessed should be declared "volatile".
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	21 15       	cp	r18, r1
     cce:	31 05       	cpc	r19, r1
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <scroll_display+0x110>
	 * the left). Adjust our finished variable - if we set it true above
	 * it will remain true provided all pixels are off.
	 */
	for(i=0; i<NUM_ROWS; i++) {
		display[i] = (display[i] >> 1) | ((col_data << (i+NUM_ROWS))&0x4000);
		finished = finished && (display[i] == 0);
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	6f 5f       	subi	r22, 0xFF	; 255
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
	 * All the other bits are shifted to the right (which because bit 0 is
	 * displayed on the left, means the display moves one position to
	 * the left). Adjust our finished variable - if we set it true above
	 * it will remain true provided all pixels are off.
	 */
	for(i=0; i<NUM_ROWS; i++) {
     cda:	67 30       	cpi	r22, 0x07	; 7
     cdc:	71 05       	cpc	r23, r1
     cde:	b9 f6       	brne	.-82     	; 0xc8e <scroll_display+0xc8>
#ifndef AVR
	/* Non AVR - we output the whole board now */
	display_board();
#endif
	return !finished;
}
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	89 27       	eor	r24, r25
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <uart_put_char>:
	}
#endif
}

#ifdef AVR
static int uart_put_char(char c, FILE* stream) {
     cea:	cf 93       	push	r28
     cec:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     cee:	8a 30       	cpi	r24, 0x0A	; 10
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     cf2:	8d e0       	ldi	r24, 0x0D	; 13
     cf4:	0e 94 75 06 	call	0xcea	; 0xcea <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     cf8:	8f b7       	in	r24, 0x3f	; 63
     cfa:	80 78       	andi	r24, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     cfe:	88 23       	and	r24, r24
     d00:	f9 f0       	breq	.+62     	; 0xd40 <uart_put_char+0x56>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     d02:	90 91 bd 01 	lds	r25, 0x01BD
     d06:	9f 3f       	cpi	r25, 0xFF	; 255
     d08:	d1 f3       	breq	.-12     	; 0xcfe <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     d0a:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     d0c:	90 91 bc 01 	lds	r25, 0x01BC
     d10:	e9 2f       	mov	r30, r25
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	e2 54       	subi	r30, 0x42	; 66
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	c0 83       	st	Z, r28
     d1a:	9f 5f       	subi	r25, 0xFF	; 255
     d1c:	90 93 bc 01 	sts	0x01BC, r25
	bytes_in_out_buffer++;
     d20:	90 91 bd 01 	lds	r25, 0x01BD
     d24:	9f 5f       	subi	r25, 0xFF	; 255
     d26:	90 93 bd 01 	sts	0x01BD, r25
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     d2a:	90 91 bc 01 	lds	r25, 0x01BC
     d2e:	9f 3f       	cpi	r25, 0xFF	; 255
     d30:	11 f4       	brne	.+4      	; 0xd36 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     d32:	10 92 bc 01 	sts	0x01BC, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
     d36:	55 9a       	sbi	0x0a, 5	; 10
	if(interrupts_enabled) {
     d38:	88 23       	and	r24, r24
     d3a:	29 f0       	breq	.+10     	; 0xd46 <uart_put_char+0x5c>
		sei();
     d3c:	78 94       	sei
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <uart_put_char+0x5c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <uart_put_char+0x60>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
}
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     d4e:	80 91 cf 02 	lds	r24, 0x02CF
     d52:	88 23       	and	r24, r24
     d54:	e1 f3       	breq	.-8      	; 0xd4e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     d56:	2f b7       	in	r18, 0x3f	; 63
     d58:	20 78       	andi	r18, 0x80	; 128
	cli();
     d5a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     d5c:	80 91 bd 02 	lds	r24, 0x02BD
     d60:	30 91 cf 02 	lds	r19, 0x02CF
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	83 1b       	sub	r24, r19
     d68:	91 09       	sbc	r25, r1
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     d6a:	e0 91 bd 02 	lds	r30, 0x02BD
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     d6e:	97 ff       	sbrs	r25, 7
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     d72:	80 91 cf 02 	lds	r24, 0x02CF
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	e8 1b       	sub	r30, r24
     d7a:	f1 09       	sbc	r31, r1
     d7c:	e2 53       	subi	r30, 0x32	; 50
     d7e:	fd 4f       	sbci	r31, 0xFD	; 253
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <uart_get_char+0x42>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     d82:	80 91 cf 02 	lds	r24, 0x02CF
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e8 1b       	sub	r30, r24
     d8a:	f1 09       	sbc	r31, r1
     d8c:	e2 54       	subi	r30, 0x42	; 66
     d8e:	fd 4f       	sbci	r31, 0xFD	; 253
     d90:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     d92:	90 91 cf 02 	lds	r25, 0x02CF
     d96:	91 50       	subi	r25, 0x01	; 1
     d98:	90 93 cf 02 	sts	0x02CF, r25
	if(interrupts_enabled) {
     d9c:	22 23       	and	r18, r18
     d9e:	09 f0       	breq	.+2      	; 0xda2 <uart_get_char+0x54>
		sei();
     da0:	78 94       	sei
	}	
	return c;
}
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret

00000da6 <init_serial_stdio>:
 */
static FILE myStream = FDEV_SETUP_STREAM(uart_put_char, uart_get_char,
		_FDEV_SETUP_RW);
#endif

void init_serial_stdio(long baudrate, int8_t echo) {
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	8b 01       	movw	r16, r22
     dac:	9c 01       	movw	r18, r24
#ifdef AVR
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     dae:	10 92 bc 01 	sts	0x01BC, r1
	bytes_in_out_buffer = 0;
     db2:	10 92 bd 01 	sts	0x01BD, r1
	input_insert_pos = 0;
     db6:	10 92 bd 02 	sts	0x02BD, r1
	bytes_in_input_buffer = 0;
     dba:	10 92 cf 02 	sts	0x02CF, r1
	input_overrun = 0;
     dbe:	10 92 ce 02 	sts	0x02CE, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     dc2:	40 93 8a 01 	sts	0x018A, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     dc6:	43 e0       	ldi	r20, 0x03	; 3
     dc8:	00 0f       	add	r16, r16
     dca:	11 1f       	adc	r17, r17
     dcc:	22 1f       	adc	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	4a 95       	dec	r20
     dd2:	d1 f7       	brne	.-12     	; 0xdc8 <init_serial_stdio+0x22>
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	72 e1       	ldi	r23, 0x12	; 18
     dd8:	8a e7       	ldi	r24, 0x7A	; 122
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a9 01       	movw	r20, r18
     dde:	98 01       	movw	r18, r16
     de0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divmodsi4>
     de4:	89 01       	movw	r16, r18
     de6:	9a 01       	movw	r18, r20
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	2f 4f       	sbci	r18, 0xFF	; 255
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	c9 01       	movw	r24, r18
     df2:	b8 01       	movw	r22, r16
     df4:	22 e0       	ldi	r18, 0x02	; 2
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divmodsi4>
     e00:	21 50       	subi	r18, 0x01	; 1
     e02:	30 40       	sbci	r19, 0x00	; 0
	UBRR0H = ubrr >> 8;
     e04:	30 93 90 00 	sts	0x0090, r19
	UBRR0L = ubrr & 0xFF;
     e08:	29 b9       	out	0x09, r18	; 9
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     e0a:	88 e1       	ldi	r24, 0x18	; 24
     e0c:	8a b9       	out	0x0a, r24	; 10
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     e0e:	57 9a       	sbi	0x0a, 7	; 10

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     e10:	87 e6       	ldi	r24, 0x67	; 103
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	90 93 d3 02 	sts	0x02D3, r25
     e18:	80 93 d2 02 	sts	0x02D2, r24
	stdin = &myStream;
     e1c:	90 93 d1 02 	sts	0x02D1, r25
     e20:	80 93 d0 02 	sts	0x02D0, r24
	tty.c_lflag &= ~(ECHO | ECHONL | ICANON);
	tcsetattr(0, 0, &tty);
	setvbuf(stdin, NULL, _IONBF, 0);
	setvbuf(stdout, NULL, _IONBF, 0);
#endif
}
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <serial_input_available>:

int8_t serial_input_available(void) {
#ifdef AVR
	return (bytes_in_input_buffer != 0);
     e2a:	90 91 cf 02 	lds	r25, 0x02CF
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	99 23       	and	r25, r25
     e32:	09 f4       	brne	.+2      	; 0xe36 <serial_input_available+0xc>
     e34:	80 e0       	ldi	r24, 0x00	; 0
	FD_ZERO(&fds);
	FD_SET(0, &fds);
	select(1, &fds, NULL, NULL, &timeout);
	return (FD_ISSET(0, &fds));
#endif
}
     e36:	08 95       	ret

00000e38 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
#ifdef AVR
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     e38:	10 92 bd 02 	sts	0x02BD, r1
	bytes_in_input_buffer = 0;
     e3c:	10 92 cf 02 	sts	0x02CF, r1
	while(serial_input_available()) {
		/* Characters available - read and discard */
		(void)fgetc(stdin);
	}
#endif
}
     e40:	08 95       	ret

00000e42 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     e56:	80 91 bd 01 	lds	r24, 0x01BD
     e5a:	88 23       	and	r24, r24
     e5c:	11 f1       	breq	.+68     	; 0xea2 <__vector_19+0x60>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     e5e:	80 91 bc 01 	lds	r24, 0x01BC
     e62:	20 91 bd 01 	lds	r18, 0x01BD
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	82 1b       	sub	r24, r18
     e6a:	91 09       	sbc	r25, r1
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     e6c:	e0 91 bc 01 	lds	r30, 0x01BC
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     e70:	97 ff       	sbrs	r25, 7
     e72:	08 c0       	rjmp	.+16     	; 0xe84 <__vector_19+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     e74:	80 91 bd 01 	lds	r24, 0x01BD
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e8 1b       	sub	r30, r24
     e7c:	f1 09       	sbc	r31, r1
     e7e:	e3 54       	subi	r30, 0x43	; 67
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	07 c0       	rjmp	.+14     	; 0xe92 <__vector_19+0x50>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     e84:	80 91 bd 01 	lds	r24, 0x01BD
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	e8 1b       	sub	r30, r24
     e8c:	f1 09       	sbc	r31, r1
     e8e:	e2 54       	subi	r30, 0x42	; 66
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     e94:	80 91 bd 01 	lds	r24, 0x01BD
     e98:	81 50       	subi	r24, 0x01	; 1
     e9a:	80 93 bd 01 	sts	0x01BD, r24
		
		/* Output the character via the UART */
		UDR0 = c;
     e9e:	9c b9       	out	0x0c, r25	; 12
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <__vector_19+0x62>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     ea2:	55 98       	cbi	0x0a, 5	; 10
	}
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_18>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	cf 93       	push	r28
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
	}
#endif
	
	/* Read the character */
	char c;
	c = UDR0;
     edc:	cc b1       	in	r28, 0x0c	; 12
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     ede:	80 91 8a 01 	lds	r24, 0x018A
     ee2:	88 23       	and	r24, r24
     ee4:	49 f0       	breq	.+18     	; 0xef8 <__vector_18+0x40>
     ee6:	80 91 bd 01 	lds	r24, 0x01BD
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	29 f0       	breq	.+10     	; 0xef8 <__vector_18+0x40>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     eee:	8c 2f       	mov	r24, r28
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 75 06 	call	0xcea	; 0xcea <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     ef8:	80 91 cf 02 	lds	r24, 0x02CF
     efc:	80 31       	cpi	r24, 0x10	; 16
     efe:	20 f0       	brcs	.+8      	; 0xf08 <__vector_18+0x50>
		input_overrun = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 ce 02 	sts	0x02CE, r24
     f06:	18 c0       	rjmp	.+48     	; 0xf38 <__vector_18+0x80>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     f08:	cd 30       	cpi	r28, 0x0D	; 13
     f0a:	09 f4       	brne	.+2      	; 0xf0e <__vector_18+0x56>
			c = '\n';
     f0c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     f0e:	80 91 bd 02 	lds	r24, 0x02BD
     f12:	e8 2f       	mov	r30, r24
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e2 54       	subi	r30, 0x42	; 66
     f18:	fd 4f       	sbci	r31, 0xFD	; 253
     f1a:	c0 83       	st	Z, r28
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	80 93 bd 02 	sts	0x02BD, r24
		bytes_in_input_buffer++;
     f22:	80 91 cf 02 	lds	r24, 0x02CF
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 cf 02 	sts	0x02CF, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     f2c:	80 91 bd 02 	lds	r24, 0x02BD
     f30:	80 31       	cpi	r24, 0x10	; 16
     f32:	11 f4       	brne	.+4      	; 0xf38 <__vector_18+0x80>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     f34:	10 92 bd 02 	sts	0x02BD, r1
		}
	}
}
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	cf 91       	pop	r28
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <move_cursor>:
#define PSTR(arg) arg
#endif


void move_cursor(int x, int y) {
    printf_P(PSTR("\x1b[%d;%dH"), y, x);
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <move_cursor+0x2>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <move_cursor+0x4>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <move_cursor+0x6>
     f62:	ed b7       	in	r30, 0x3d	; 61
     f64:	fe b7       	in	r31, 0x3e	; 62
     f66:	31 96       	adiw	r30, 0x01	; 1
     f68:	2a e6       	ldi	r18, 0x6A	; 106
     f6a:	31 e0       	ldi	r19, 0x01	; 1
     f6c:	ad b7       	in	r26, 0x3d	; 61
     f6e:	be b7       	in	r27, 0x3e	; 62
     f70:	12 96       	adiw	r26, 0x02	; 2
     f72:	3c 93       	st	X, r19
     f74:	2e 93       	st	-X, r18
     f76:	11 97       	sbiw	r26, 0x01	; 1
     f78:	73 83       	std	Z+3, r23	; 0x03
     f7a:	62 83       	std	Z+2, r22	; 0x02
     f7c:	95 83       	std	Z+5, r25	; 0x05
     f7e:	84 83       	std	Z+4, r24	; 0x04
     f80:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>
     f84:	8d b7       	in	r24, 0x3d	; 61
     f86:	9e b7       	in	r25, 0x3e	; 62
     f88:	06 96       	adiw	r24, 0x06	; 6
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	9e bf       	out	0x3e, r25	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	8d bf       	out	0x3d, r24	; 61
}
     f94:	08 95       	ret

00000f96 <normal_display_mode>:

void normal_display_mode(void) {
	printf_P(PSTR("\x1b[0m"));
     f96:	00 d0       	rcall	.+0      	; 0xf98 <normal_display_mode+0x2>
     f98:	83 e7       	ldi	r24, 0x73	; 115
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	ed b7       	in	r30, 0x3d	; 61
     f9e:	fe b7       	in	r31, 0x3e	; 62
     fa0:	92 83       	std	Z+2, r25	; 0x02
     fa2:	81 83       	std	Z+1, r24	; 0x01
     fa4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
}
     fac:	08 95       	ret

00000fae <reverse_video>:

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <reverse_video+0x2>
     fb0:	88 e7       	ldi	r24, 0x78	; 120
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	ed b7       	in	r30, 0x3d	; 61
     fb6:	fe b7       	in	r31, 0x3e	; 62
     fb8:	92 83       	std	Z+2, r25	; 0x02
     fba:	81 83       	std	Z+1, r24	; 0x01
     fbc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
}
     fc4:	08 95       	ret

00000fc6 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <clear_terminal+0x2>
     fc8:	8d e7       	ldi	r24, 0x7D	; 125
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	ed b7       	in	r30, 0x3d	; 61
     fce:	fe b7       	in	r31, 0x3e	; 62
     fd0:	92 83       	std	Z+2, r25	; 0x02
     fd2:	81 83       	std	Z+1, r24	; 0x01
     fd4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
}
     fdc:	08 95       	ret

00000fde <clear_to_end_of_line>:

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <clear_to_end_of_line+0x2>
     fe0:	82 e8       	ldi	r24, 0x82	; 130
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	ed b7       	in	r30, 0x3d	; 61
     fe6:	fe b7       	in	r31, 0x3e	; 62
     fe8:	92 83       	std	Z+2, r25	; 0x02
     fea:	81 83       	std	Z+1, r24	; 0x01
     fec:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
}
     ff4:	08 95       	ret

00000ff6 <set_display_attribute>:

void set_display_attribute(int8_t parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <set_display_attribute+0x2>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <set_display_attribute+0x4>
     ffa:	26 e8       	ldi	r18, 0x86	; 134
     ffc:	31 e0       	ldi	r19, 0x01	; 1
     ffe:	ed b7       	in	r30, 0x3d	; 61
    1000:	fe b7       	in	r31, 0x3e	; 62
    1002:	32 83       	std	Z+2, r19	; 0x02
    1004:	21 83       	std	Z+1, r18	; 0x01
    1006:	99 27       	eor	r25, r25
    1008:	87 fd       	sbrc	r24, 7
    100a:	90 95       	com	r25
    100c:	94 83       	std	Z+4, r25	; 0x04
    100e:	83 83       	std	Z+3, r24	; 0x03
    1010:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
}
    101c:	08 95       	ret

0000101e <draw_horizontal_line>:

void draw_horizontal_line(int y, int startx, int endx) {
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	9c 01       	movw	r18, r24
    102c:	16 2f       	mov	r17, r22
    102e:	07 2f       	mov	r16, r23
    1030:	7a 01       	movw	r14, r20
	int i;
	move_cursor(startx, y);
    1032:	86 2f       	mov	r24, r22
    1034:	97 2f       	mov	r25, r23
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 ae 07 	call	0xf5c	; 0xf5c <move_cursor>
	reverse_video();
    103c:	0e 94 d7 07 	call	0xfae	; 0xfae <reverse_video>
	for(i=startx; i <= endx; i++) {
    1040:	c1 2f       	mov	r28, r17
    1042:	d0 2f       	mov	r29, r16
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <draw_horizontal_line+0x32>
		printf(" ");	/* No need to use printf_P - printing 
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <putchar>

void draw_horizontal_line(int y, int startx, int endx) {
	int i;
	move_cursor(startx, y);
	reverse_video();
	for(i=startx; i <= endx; i++) {
    104e:	21 96       	adiw	r28, 0x01	; 1
    1050:	ec 16       	cp	r14, r28
    1052:	fd 06       	cpc	r15, r29
    1054:	c4 f7       	brge	.-16     	; 0x1046 <draw_horizontal_line+0x28>
		printf(" ");	/* No need to use printf_P - printing 
						 * a single character gets optimised
						 * to a putchar call 
						 */
	}
	normal_display_mode();
    1056:	0e 94 cb 07 	call	0xf96	; 0xf96 <normal_display_mode>
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	08 95       	ret

00001068 <draw_vertical_line>:

void draw_vertical_line(int x, int starty, int endy) {
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	16 2f       	mov	r17, r22
    1076:	07 2f       	mov	r16, r23
    1078:	7a 01       	movw	r14, r20
	int i;
	move_cursor(x, starty);
    107a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <move_cursor>
	reverse_video();
    107e:	0e 94 d7 07 	call	0xfae	; 0xfae <reverse_video>
	for(i=starty; i < endy; i++) {
    1082:	c1 2f       	mov	r28, r17
    1084:	d0 2f       	mov	r29, r16
		printf(" ");
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
    1086:	0c e8       	ldi	r16, 0x8C	; 140
    1088:	11 e0       	ldi	r17, 0x01	; 1

void draw_vertical_line(int x, int starty, int endy) {
	int i;
	move_cursor(x, starty);
	reverse_video();
	for(i=starty; i < endy; i++) {
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <draw_vertical_line+0x3c>
		printf(" ");
    108c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <putchar>
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
    1090:	00 d0       	rcall	.+0      	; 0x1092 <draw_vertical_line+0x2a>
    1092:	ed b7       	in	r30, 0x3d	; 61
    1094:	fe b7       	in	r31, 0x3e	; 62
    1096:	12 83       	std	Z+2, r17	; 0x02
    1098:	01 83       	std	Z+1, r16	; 0x01
    109a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <printf_P>

void draw_vertical_line(int x, int starty, int endy) {
	int i;
	move_cursor(x, starty);
	reverse_video();
	for(i=starty; i < endy; i++) {
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
		printf(" ");
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0

void draw_vertical_line(int x, int starty, int endy) {
	int i;
	move_cursor(x, starty);
	reverse_video();
	for(i=starty; i < endy; i++) {
    10a8:	ce 15       	cp	r28, r14
    10aa:	df 05       	cpc	r29, r15
    10ac:	7c f3       	brlt	.-34     	; 0x108c <draw_vertical_line+0x24>
		printf(" ");
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
    10ae:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <putchar>
	normal_display_mode();
    10b2:	0e 94 cb 07 	call	0xf96	; 0xf96 <normal_display_mode>
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	08 95       	ret

000010c4 <init_timer2>:
 */
void init_timer2(TIMER_FUNCTION* timer_func) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    10c4:	10 92 8b 01 	sts	0x018B, r1
    10c8:	10 92 8c 01 	sts	0x018C, r1
    10cc:	10 92 8d 01 	sts	0x018D, r1
    10d0:	10 92 8e 01 	sts	0x018E, r1
	
	/* Remember the user provider timer function */
	user_provided_timer_function = timer_func;
    10d4:	90 93 90 01 	sts	0x0190, r25
    10d8:	80 93 8f 01 	sts	0x018F, r24
#ifdef AVR
	/* Set the output compare value to be 124 */
	OCR2 = 124;
    10dc:	8c e7       	ldi	r24, 0x7C	; 124
    10de:	83 bd       	out	0x23, r24	; 35

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK |= (1<<OCIE2);
    10e0:	87 b7       	in	r24, 0x37	; 55
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	87 bf       	out	0x37, r24	; 55

	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR2 = (1<<WGM21)|(0<<WGM20)|(0<<CS22)|(1<<CS21)|(1<<CS20);
    10e6:	8b e0       	ldi	r24, 0x0B	; 11
    10e8:	85 bd       	out	0x25, r24	; 37
#endif
}
    10ea:	08 95       	ret

000010ec <get_clock_ticks>:

uint32_t get_clock_ticks(void) {
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    10f0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    10f2:	f8 94       	cli
	returnValue = clockTicks;
    10f4:	00 91 8b 01 	lds	r16, 0x018B
    10f8:	10 91 8c 01 	lds	r17, 0x018C
    10fc:	20 91 8d 01 	lds	r18, 0x018D
    1100:	30 91 8e 01 	lds	r19, 0x018E
	if(interruptsOn) {
    1104:	87 ff       	sbrs	r24, 7
    1106:	01 c0       	rjmp	.+2      	; 0x110a <__stack+0xb>
		sei();
    1108:	78 94       	sei
 */
	struct timeval t;
	gettimeofday(&t, 0);
	return (uint32_t)(t.tv_sec * 1000 + t.tv_usec / 1000);
#endif
}
    110a:	b8 01       	movw	r22, r16
    110c:	c9 01       	movw	r24, r18
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <__vector_9>:

#ifdef AVR
ISR(TIMER2_COMP_vect) {
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
	/* Increment our clock tick count */
	clockTicks++;
    1136:	80 91 8b 01 	lds	r24, 0x018B
    113a:	90 91 8c 01 	lds	r25, 0x018C
    113e:	a0 91 8d 01 	lds	r26, 0x018D
    1142:	b0 91 8e 01 	lds	r27, 0x018E
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	a1 1d       	adc	r26, r1
    114a:	b1 1d       	adc	r27, r1
    114c:	80 93 8b 01 	sts	0x018B, r24
    1150:	90 93 8c 01 	sts	0x018C, r25
    1154:	a0 93 8d 01 	sts	0x018D, r26
    1158:	b0 93 8e 01 	sts	0x018E, r27
	
	/* If we have a user provided timer function, call it now */
	if(user_provided_timer_function) {
    115c:	e0 91 8f 01 	lds	r30, 0x018F
    1160:	f0 91 90 01 	lds	r31, 0x0190
    1164:	30 97       	sbiw	r30, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <__vector_9+0x56>
		user_provided_timer_function();
    1168:	09 95       	icall
	}
}
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <main>:
 */
int main(void) {		
	/* Setup all our hardware peripherals and call backs. This 
	 * will turn on interrupts.
	 */
	initialise_hardware();
    118c:	0e 94 6f 05 	call	0xade	; 0xade <initialise_hardware>

	/* Show the splash screen message. This returns when 
	 * message display is complete. 
	 */
	splash_screen();
    1190:	0e 94 84 05 	call	0xb08	; 0xb08 <splash_screen>
	
	/* Play the game - forever */
	while(1) {
		new_game();
    1194:	0e 94 d7 04 	call	0x9ae	; 0x9ae <new_game>
		play_game();
    1198:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <play_game>
    119c:	ff cf       	rjmp	.-2      	; 0x119c <main+0x10>

0000119e <__divmodhi4>:
    119e:	97 fb       	bst	r25, 7
    11a0:	09 2e       	mov	r0, r25
    11a2:	07 26       	eor	r0, r23
    11a4:	0a d0       	rcall	.+20     	; 0x11ba <__divmodhi4_neg1>
    11a6:	77 fd       	sbrc	r23, 7
    11a8:	04 d0       	rcall	.+8      	; 0x11b2 <__divmodhi4_neg2>
    11aa:	27 d0       	rcall	.+78     	; 0x11fa <__udivmodhi4>
    11ac:	06 d0       	rcall	.+12     	; 0x11ba <__divmodhi4_neg1>
    11ae:	00 20       	and	r0, r0
    11b0:	1a f4       	brpl	.+6      	; 0x11b8 <__divmodhi4_exit>

000011b2 <__divmodhi4_neg2>:
    11b2:	70 95       	com	r23
    11b4:	61 95       	neg	r22
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255

000011b8 <__divmodhi4_exit>:
    11b8:	08 95       	ret

000011ba <__divmodhi4_neg1>:
    11ba:	f6 f7       	brtc	.-4      	; 0x11b8 <__divmodhi4_exit>
    11bc:	90 95       	com	r25
    11be:	81 95       	neg	r24
    11c0:	9f 4f       	sbci	r25, 0xFF	; 255
    11c2:	08 95       	ret

000011c4 <__divmodsi4>:
    11c4:	97 fb       	bst	r25, 7
    11c6:	09 2e       	mov	r0, r25
    11c8:	05 26       	eor	r0, r21
    11ca:	0e d0       	rcall	.+28     	; 0x11e8 <__divmodsi4_neg1>
    11cc:	57 fd       	sbrc	r21, 7
    11ce:	04 d0       	rcall	.+8      	; 0x11d8 <__divmodsi4_neg2>
    11d0:	28 d0       	rcall	.+80     	; 0x1222 <__udivmodsi4>
    11d2:	0a d0       	rcall	.+20     	; 0x11e8 <__divmodsi4_neg1>
    11d4:	00 1c       	adc	r0, r0
    11d6:	38 f4       	brcc	.+14     	; 0x11e6 <__divmodsi4_exit>

000011d8 <__divmodsi4_neg2>:
    11d8:	50 95       	com	r21
    11da:	40 95       	com	r20
    11dc:	30 95       	com	r19
    11de:	21 95       	neg	r18
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	4f 4f       	sbci	r20, 0xFF	; 255
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255

000011e6 <__divmodsi4_exit>:
    11e6:	08 95       	ret

000011e8 <__divmodsi4_neg1>:
    11e8:	f6 f7       	brtc	.-4      	; 0x11e6 <__divmodsi4_exit>
    11ea:	90 95       	com	r25
    11ec:	80 95       	com	r24
    11ee:	70 95       	com	r23
    11f0:	61 95       	neg	r22
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__udivmodhi4>:
    11fa:	aa 1b       	sub	r26, r26
    11fc:	bb 1b       	sub	r27, r27
    11fe:	51 e1       	ldi	r21, 0x11	; 17
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <__udivmodhi4_ep>

00001202 <__udivmodhi4_loop>:
    1202:	aa 1f       	adc	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	a6 17       	cp	r26, r22
    1208:	b7 07       	cpc	r27, r23
    120a:	10 f0       	brcs	.+4      	; 0x1210 <__udivmodhi4_ep>
    120c:	a6 1b       	sub	r26, r22
    120e:	b7 0b       	sbc	r27, r23

00001210 <__udivmodhi4_ep>:
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	5a 95       	dec	r21
    1216:	a9 f7       	brne	.-22     	; 0x1202 <__udivmodhi4_loop>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	08 95       	ret

00001222 <__udivmodsi4>:
    1222:	a1 e2       	ldi	r26, 0x21	; 33
    1224:	1a 2e       	mov	r1, r26
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	fd 01       	movw	r30, r26
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <__udivmodsi4_ep>

0000122e <__udivmodsi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	a2 17       	cp	r26, r18
    1238:	b3 07       	cpc	r27, r19
    123a:	e4 07       	cpc	r30, r20
    123c:	f5 07       	cpc	r31, r21
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__udivmodsi4_ep>
    1240:	a2 1b       	sub	r26, r18
    1242:	b3 0b       	sbc	r27, r19
    1244:	e4 0b       	sbc	r30, r20
    1246:	f5 0b       	sbc	r31, r21

00001248 <__udivmodsi4_ep>:
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a 94       	dec	r1
    1252:	69 f7       	brne	.-38     	; 0x122e <__udivmodsi4_loop>
    1254:	60 95       	com	r22
    1256:	70 95       	com	r23
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <do_rand>:
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
    127c:	88 81       	ld	r24, Y
    127e:	99 81       	ldd	r25, Y+1	; 0x01
    1280:	aa 81       	ldd	r26, Y+2	; 0x02
    1282:	bb 81       	ldd	r27, Y+3	; 0x03
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	a1 05       	cpc	r26, r1
    1288:	b1 05       	cpc	r27, r1
    128a:	21 f4       	brne	.+8      	; 0x1294 <do_rand+0x2e>
    128c:	84 e2       	ldi	r24, 0x24	; 36
    128e:	99 ed       	ldi	r25, 0xD9	; 217
    1290:	ab e5       	ldi	r26, 0x5B	; 91
    1292:	b7 e0       	ldi	r27, 0x07	; 7
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	2d e1       	ldi	r18, 0x1D	; 29
    129a:	33 ef       	ldi	r19, 0xF3	; 243
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divmodsi4>
    12a4:	49 01       	movw	r8, r18
    12a6:	5a 01       	movw	r10, r20
    12a8:	27 ea       	ldi	r18, 0xA7	; 167
    12aa:	31 e4       	ldi	r19, 0x41	; 65
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	0e 94 ae 0c 	call	0x195c	; 0x195c <__mulsi3>
    12b4:	6b 01       	movw	r12, r22
    12b6:	7c 01       	movw	r14, r24
    12b8:	c5 01       	movw	r24, r10
    12ba:	b4 01       	movw	r22, r8
    12bc:	2c ee       	ldi	r18, 0xEC	; 236
    12be:	34 ef       	ldi	r19, 0xF4	; 244
    12c0:	4f ef       	ldi	r20, 0xFF	; 255
    12c2:	5f ef       	ldi	r21, 0xFF	; 255
    12c4:	0e 94 ae 0c 	call	0x195c	; 0x195c <__mulsi3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	c8 0e       	add	r12, r24
    12ce:	d9 1e       	adc	r13, r25
    12d0:	ea 1e       	adc	r14, r26
    12d2:	fb 1e       	adc	r15, r27
    12d4:	f7 fe       	sbrs	r15, 7
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <do_rand+0x82>
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	af ef       	ldi	r26, 0xFF	; 255
    12de:	bf e7       	ldi	r27, 0x7F	; 127
    12e0:	c8 0e       	add	r12, r24
    12e2:	d9 1e       	adc	r13, r25
    12e4:	ea 1e       	adc	r14, r26
    12e6:	fb 1e       	adc	r15, r27
    12e8:	c8 82       	st	Y, r12
    12ea:	d9 82       	std	Y+1, r13	; 0x01
    12ec:	ea 82       	std	Y+2, r14	; 0x02
    12ee:	fb 82       	std	Y+3, r15	; 0x03
    12f0:	c6 01       	movw	r24, r12
    12f2:	9f 77       	andi	r25, 0x7F	; 127
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	9f 90       	pop	r9
    1306:	8f 90       	pop	r8
    1308:	08 95       	ret

0000130a <rand_r>:
    130a:	0e 94 33 09 	call	0x1266	; 0x1266 <do_rand>
    130e:	08 95       	ret

00001310 <rand>:
    1310:	85 e7       	ldi	r24, 0x75	; 117
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 33 09 	call	0x1266	; 0x1266 <do_rand>
    1318:	08 95       	ret

0000131a <srand>:
    131a:	a0 e0       	ldi	r26, 0x00	; 0
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	80 93 75 01 	sts	0x0175, r24
    1322:	90 93 76 01 	sts	0x0176, r25
    1326:	a0 93 77 01 	sts	0x0177, r26
    132a:	b0 93 78 01 	sts	0x0178, r27
    132e:	08 95       	ret

00001330 <fgetc>:
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ec 01       	movw	r28, r24
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	20 ff       	sbrs	r18, 0
    133a:	35 c0       	rjmp	.+106    	; 0x13a6 <fgetc+0x76>
    133c:	26 ff       	sbrs	r18, 6
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <fgetc+0x22>
    1340:	2f 7b       	andi	r18, 0xBF	; 191
    1342:	2b 83       	std	Y+3, r18	; 0x03
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	9f 83       	std	Y+7, r25	; 0x07
    134c:	8e 83       	std	Y+6, r24	; 0x06
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <fgetc+0x72>
    1352:	22 ff       	sbrs	r18, 2
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <fgetc+0x44>
    1356:	e8 81       	ld	r30, Y
    1358:	f9 81       	ldd	r31, Y+1	; 0x01
    135a:	80 81       	ld	r24, Z
    135c:	99 27       	eor	r25, r25
    135e:	87 fd       	sbrc	r24, 7
    1360:	90 95       	com	r25
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	19 f4       	brne	.+6      	; 0x136c <fgetc+0x3c>
    1366:	20 62       	ori	r18, 0x20	; 32
    1368:	2b 83       	std	Y+3, r18	; 0x03
    136a:	1d c0       	rjmp	.+58     	; 0x13a6 <fgetc+0x76>
    136c:	31 96       	adiw	r30, 0x01	; 1
    136e:	f9 83       	std	Y+1, r31	; 0x01
    1370:	e8 83       	st	Y, r30
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <fgetc+0x66>
    1374:	ea 85       	ldd	r30, Y+10	; 0x0a
    1376:	fb 85       	ldd	r31, Y+11	; 0x0b
    1378:	ce 01       	movw	r24, r28
    137a:	09 95       	icall
    137c:	97 ff       	sbrs	r25, 7
    137e:	0b c0       	rjmp	.+22     	; 0x1396 <fgetc+0x66>
    1380:	2b 81       	ldd	r18, Y+3	; 0x03
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	8f 3f       	cpi	r24, 0xFF	; 255
    1386:	93 07       	cpc	r25, r19
    1388:	11 f4       	brne	.+4      	; 0x138e <fgetc+0x5e>
    138a:	80 e1       	ldi	r24, 0x10	; 16
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <fgetc+0x60>
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	82 2b       	or	r24, r18
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <fgetc+0x76>
    1396:	2e 81       	ldd	r18, Y+6	; 0x06
    1398:	3f 81       	ldd	r19, Y+7	; 0x07
    139a:	2f 5f       	subi	r18, 0xFF	; 255
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	3f 83       	std	Y+7, r19	; 0x07
    13a0:	2e 83       	std	Y+6, r18	; 0x06
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <fgetc+0x7a>
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <printf_P>:
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee ed       	ldi	r30, 0xDE	; 222
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__prologue_saves__+0x20>
    13bc:	fe 01       	movw	r30, r28
    13be:	35 96       	adiw	r30, 0x05	; 5
    13c0:	61 91       	ld	r22, Z+
    13c2:	71 91       	ld	r23, Z+
    13c4:	80 91 d2 02 	lds	r24, 0x02D2
    13c8:	90 91 d3 02 	lds	r25, 0x02D3
    13cc:	dc 01       	movw	r26, r24
    13ce:	13 96       	adiw	r26, 0x03	; 3
    13d0:	2c 91       	ld	r18, X
    13d2:	13 97       	sbiw	r26, 0x03	; 3
    13d4:	28 60       	ori	r18, 0x08	; 8
    13d6:	13 96       	adiw	r26, 0x03	; 3
    13d8:	2c 93       	st	X, r18
    13da:	af 01       	movw	r20, r30
    13dc:	0e 94 30 0a 	call	0x1460	; 0x1460 <vfprintf>
    13e0:	e0 91 d2 02 	lds	r30, 0x02D2
    13e4:	f0 91 d3 02 	lds	r31, 0x02D3
    13e8:	23 81       	ldd	r18, Z+3	; 0x03
    13ea:	27 7f       	andi	r18, 0xF7	; 247
    13ec:	23 83       	std	Z+3, r18	; 0x03
    13ee:	20 96       	adiw	r28, 0x00	; 0
    13f0:	e2 e0       	ldi	r30, 0x02	; 2
    13f2:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__epilogue_restores__+0x20>

000013f6 <putchar>:
    13f6:	60 91 d2 02 	lds	r22, 0x02D2
    13fa:	70 91 d3 02 	lds	r23, 0x02D3
    13fe:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    1402:	08 95       	ret

00001404 <puts>:
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	8c 01       	movw	r16, r24
    140e:	e0 91 d2 02 	lds	r30, 0x02D2
    1412:	f0 91 d3 02 	lds	r31, 0x02D3
    1416:	83 81       	ldd	r24, Z+3	; 0x03
    1418:	81 ff       	sbrs	r24, 1
    141a:	1a c0       	rjmp	.+52     	; 0x1450 <puts+0x4c>
    141c:	c0 e0       	ldi	r28, 0x00	; 0
    141e:	d0 e0       	ldi	r29, 0x00	; 0
    1420:	05 c0       	rjmp	.+10     	; 0x142c <puts+0x28>
    1422:	09 95       	icall
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	11 f0       	breq	.+4      	; 0x142c <puts+0x28>
    1428:	cf ef       	ldi	r28, 0xFF	; 255
    142a:	df ef       	ldi	r29, 0xFF	; 255
    142c:	f8 01       	movw	r30, r16
    142e:	81 91       	ld	r24, Z+
    1430:	8f 01       	movw	r16, r30
    1432:	60 91 d2 02 	lds	r22, 0x02D2
    1436:	70 91 d3 02 	lds	r23, 0x02D3
    143a:	db 01       	movw	r26, r22
    143c:	18 96       	adiw	r26, 0x08	; 8
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	19 97       	sbiw	r26, 0x09	; 9
    1444:	88 23       	and	r24, r24
    1446:	69 f7       	brne	.-38     	; 0x1422 <puts+0x1e>
    1448:	8a e0       	ldi	r24, 0x0A	; 10
    144a:	09 95       	icall
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	11 f0       	breq	.+4      	; 0x1454 <puts+0x50>
    1450:	cf ef       	ldi	r28, 0xFF	; 255
    1452:	df ef       	ldi	r29, 0xFF	; 255
    1454:	ce 01       	movw	r24, r28
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <vfprintf>:
    1460:	ad e0       	ldi	r26, 0x0D	; 13
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e6 e3       	ldi	r30, 0x36	; 54
    1466:	fa e0       	ldi	r31, 0x0A	; 10
    1468:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__prologue_saves__>
    146c:	3c 01       	movw	r6, r24
    146e:	7d 87       	std	Y+13, r23	; 0x0d
    1470:	6c 87       	std	Y+12, r22	; 0x0c
    1472:	5a 01       	movw	r10, r20
    1474:	fc 01       	movw	r30, r24
    1476:	17 82       	std	Z+7, r1	; 0x07
    1478:	16 82       	std	Z+6, r1	; 0x06
    147a:	83 81       	ldd	r24, Z+3	; 0x03
    147c:	81 ff       	sbrs	r24, 1
    147e:	c8 c1       	rjmp	.+912    	; 0x1810 <vfprintf+0x3b0>
    1480:	2e 01       	movw	r4, r28
    1482:	08 94       	sec
    1484:	41 1c       	adc	r4, r1
    1486:	51 1c       	adc	r5, r1
    1488:	f3 01       	movw	r30, r6
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	ec 85       	ldd	r30, Y+12	; 0x0c
    148e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1490:	93 fd       	sbrc	r25, 3
    1492:	85 91       	lpm	r24, Z+
    1494:	93 ff       	sbrs	r25, 3
    1496:	81 91       	ld	r24, Z+
    1498:	fd 87       	std	Y+13, r31	; 0x0d
    149a:	ec 87       	std	Y+12, r30	; 0x0c
    149c:	88 23       	and	r24, r24
    149e:	09 f4       	brne	.+2      	; 0x14a2 <vfprintf+0x42>
    14a0:	b3 c1       	rjmp	.+870    	; 0x1808 <vfprintf+0x3a8>
    14a2:	85 32       	cpi	r24, 0x25	; 37
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <vfprintf+0x56>
    14a6:	93 fd       	sbrc	r25, 3
    14a8:	85 91       	lpm	r24, Z+
    14aa:	93 ff       	sbrs	r25, 3
    14ac:	81 91       	ld	r24, Z+
    14ae:	fd 87       	std	Y+13, r31	; 0x0d
    14b0:	ec 87       	std	Y+12, r30	; 0x0c
    14b2:	85 32       	cpi	r24, 0x25	; 37
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <vfprintf+0x60>
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b3 01       	movw	r22, r6
    14ba:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    14be:	e4 cf       	rjmp	.-56     	; 0x1488 <vfprintf+0x28>
    14c0:	ff 24       	eor	r15, r15
    14c2:	ee 24       	eor	r14, r14
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	10 32       	cpi	r17, 0x20	; 32
    14c8:	b0 f4       	brcc	.+44     	; 0x14f6 <vfprintf+0x96>
    14ca:	8b 32       	cpi	r24, 0x2B	; 43
    14cc:	69 f0       	breq	.+26     	; 0x14e8 <vfprintf+0x88>
    14ce:	8c 32       	cpi	r24, 0x2C	; 44
    14d0:	28 f4       	brcc	.+10     	; 0x14dc <vfprintf+0x7c>
    14d2:	80 32       	cpi	r24, 0x20	; 32
    14d4:	51 f0       	breq	.+20     	; 0x14ea <vfprintf+0x8a>
    14d6:	83 32       	cpi	r24, 0x23	; 35
    14d8:	71 f4       	brne	.+28     	; 0x14f6 <vfprintf+0x96>
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <vfprintf+0x92>
    14dc:	8d 32       	cpi	r24, 0x2D	; 45
    14de:	39 f0       	breq	.+14     	; 0x14ee <vfprintf+0x8e>
    14e0:	80 33       	cpi	r24, 0x30	; 48
    14e2:	49 f4       	brne	.+18     	; 0x14f6 <vfprintf+0x96>
    14e4:	11 60       	ori	r17, 0x01	; 1
    14e6:	2c c0       	rjmp	.+88     	; 0x1540 <vfprintf+0xe0>
    14e8:	12 60       	ori	r17, 0x02	; 2
    14ea:	14 60       	ori	r17, 0x04	; 4
    14ec:	29 c0       	rjmp	.+82     	; 0x1540 <vfprintf+0xe0>
    14ee:	18 60       	ori	r17, 0x08	; 8
    14f0:	27 c0       	rjmp	.+78     	; 0x1540 <vfprintf+0xe0>
    14f2:	10 61       	ori	r17, 0x10	; 16
    14f4:	25 c0       	rjmp	.+74     	; 0x1540 <vfprintf+0xe0>
    14f6:	17 fd       	sbrc	r17, 7
    14f8:	2e c0       	rjmp	.+92     	; 0x1556 <vfprintf+0xf6>
    14fa:	28 2f       	mov	r18, r24
    14fc:	20 53       	subi	r18, 0x30	; 48
    14fe:	2a 30       	cpi	r18, 0x0A	; 10
    1500:	98 f4       	brcc	.+38     	; 0x1528 <vfprintf+0xc8>
    1502:	16 ff       	sbrs	r17, 6
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <vfprintf+0xb6>
    1506:	8f 2d       	mov	r24, r15
    1508:	88 0f       	add	r24, r24
    150a:	f8 2e       	mov	r15, r24
    150c:	ff 0c       	add	r15, r15
    150e:	ff 0c       	add	r15, r15
    1510:	f8 0e       	add	r15, r24
    1512:	f2 0e       	add	r15, r18
    1514:	15 c0       	rjmp	.+42     	; 0x1540 <vfprintf+0xe0>
    1516:	8e 2d       	mov	r24, r14
    1518:	88 0f       	add	r24, r24
    151a:	e8 2e       	mov	r14, r24
    151c:	ee 0c       	add	r14, r14
    151e:	ee 0c       	add	r14, r14
    1520:	e8 0e       	add	r14, r24
    1522:	e2 0e       	add	r14, r18
    1524:	10 62       	ori	r17, 0x20	; 32
    1526:	0c c0       	rjmp	.+24     	; 0x1540 <vfprintf+0xe0>
    1528:	8e 32       	cpi	r24, 0x2E	; 46
    152a:	21 f4       	brne	.+8      	; 0x1534 <vfprintf+0xd4>
    152c:	16 fd       	sbrc	r17, 6
    152e:	6c c1       	rjmp	.+728    	; 0x1808 <vfprintf+0x3a8>
    1530:	10 64       	ori	r17, 0x40	; 64
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <vfprintf+0xe0>
    1534:	8c 36       	cpi	r24, 0x6C	; 108
    1536:	11 f4       	brne	.+4      	; 0x153c <vfprintf+0xdc>
    1538:	10 68       	ori	r17, 0x80	; 128
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <vfprintf+0xe0>
    153c:	88 36       	cpi	r24, 0x68	; 104
    153e:	59 f4       	brne	.+22     	; 0x1556 <vfprintf+0xf6>
    1540:	ec 85       	ldd	r30, Y+12	; 0x0c
    1542:	fd 85       	ldd	r31, Y+13	; 0x0d
    1544:	93 fd       	sbrc	r25, 3
    1546:	85 91       	lpm	r24, Z+
    1548:	93 ff       	sbrs	r25, 3
    154a:	81 91       	ld	r24, Z+
    154c:	fd 87       	std	Y+13, r31	; 0x0d
    154e:	ec 87       	std	Y+12, r30	; 0x0c
    1550:	88 23       	and	r24, r24
    1552:	09 f0       	breq	.+2      	; 0x1556 <vfprintf+0xf6>
    1554:	b8 cf       	rjmp	.-144    	; 0x14c6 <vfprintf+0x66>
    1556:	98 2f       	mov	r25, r24
    1558:	95 54       	subi	r25, 0x45	; 69
    155a:	93 30       	cpi	r25, 0x03	; 3
    155c:	18 f0       	brcs	.+6      	; 0x1564 <vfprintf+0x104>
    155e:	90 52       	subi	r25, 0x20	; 32
    1560:	93 30       	cpi	r25, 0x03	; 3
    1562:	38 f4       	brcc	.+14     	; 0x1572 <vfprintf+0x112>
    1564:	24 e0       	ldi	r18, 0x04	; 4
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	a2 0e       	add	r10, r18
    156a:	b3 1e       	adc	r11, r19
    156c:	3f e3       	ldi	r19, 0x3F	; 63
    156e:	39 83       	std	Y+1, r19	; 0x01
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <vfprintf+0x130>
    1572:	83 36       	cpi	r24, 0x63	; 99
    1574:	31 f0       	breq	.+12     	; 0x1582 <vfprintf+0x122>
    1576:	83 37       	cpi	r24, 0x73	; 115
    1578:	81 f0       	breq	.+32     	; 0x159a <vfprintf+0x13a>
    157a:	83 35       	cpi	r24, 0x53	; 83
    157c:	09 f0       	breq	.+2      	; 0x1580 <vfprintf+0x120>
    157e:	5a c0       	rjmp	.+180    	; 0x1634 <vfprintf+0x1d4>
    1580:	22 c0       	rjmp	.+68     	; 0x15c6 <vfprintf+0x166>
    1582:	f5 01       	movw	r30, r10
    1584:	80 81       	ld	r24, Z
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	22 e0       	ldi	r18, 0x02	; 2
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	a2 0e       	add	r10, r18
    158e:	b3 1e       	adc	r11, r19
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	c2 2e       	mov	r12, r18
    1594:	d1 2c       	mov	r13, r1
    1596:	42 01       	movw	r8, r4
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <vfprintf+0x162>
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	29 2e       	mov	r2, r25
    159e:	31 2c       	mov	r3, r1
    15a0:	2a 0c       	add	r2, r10
    15a2:	3b 1c       	adc	r3, r11
    15a4:	f5 01       	movw	r30, r10
    15a6:	80 80       	ld	r8, Z
    15a8:	91 80       	ldd	r9, Z+1	; 0x01
    15aa:	16 ff       	sbrs	r17, 6
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <vfprintf+0x154>
    15ae:	6f 2d       	mov	r22, r15
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <vfprintf+0x158>
    15b4:	6f ef       	ldi	r22, 0xFF	; 255
    15b6:	7f ef       	ldi	r23, 0xFF	; 255
    15b8:	c4 01       	movw	r24, r8
    15ba:	0e 94 19 0c 	call	0x1832	; 0x1832 <strnlen>
    15be:	6c 01       	movw	r12, r24
    15c0:	51 01       	movw	r10, r2
    15c2:	1f 77       	andi	r17, 0x7F	; 127
    15c4:	15 c0       	rjmp	.+42     	; 0x15f0 <vfprintf+0x190>
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	28 2e       	mov	r2, r24
    15ca:	31 2c       	mov	r3, r1
    15cc:	2a 0c       	add	r2, r10
    15ce:	3b 1c       	adc	r3, r11
    15d0:	f5 01       	movw	r30, r10
    15d2:	80 80       	ld	r8, Z
    15d4:	91 80       	ldd	r9, Z+1	; 0x01
    15d6:	16 ff       	sbrs	r17, 6
    15d8:	03 c0       	rjmp	.+6      	; 0x15e0 <vfprintf+0x180>
    15da:	6f 2d       	mov	r22, r15
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0x184>
    15e0:	6f ef       	ldi	r22, 0xFF	; 255
    15e2:	7f ef       	ldi	r23, 0xFF	; 255
    15e4:	c4 01       	movw	r24, r8
    15e6:	0e 94 0e 0c 	call	0x181c	; 0x181c <strnlen_P>
    15ea:	6c 01       	movw	r12, r24
    15ec:	10 68       	ori	r17, 0x80	; 128
    15ee:	51 01       	movw	r10, r2
    15f0:	13 fd       	sbrc	r17, 3
    15f2:	1c c0       	rjmp	.+56     	; 0x162c <vfprintf+0x1cc>
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <vfprintf+0x1a2>
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	b3 01       	movw	r22, r6
    15fc:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    1600:	ea 94       	dec	r14
    1602:	8e 2d       	mov	r24, r14
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	c8 16       	cp	r12, r24
    1608:	d9 06       	cpc	r13, r25
    160a:	a8 f3       	brcs	.-22     	; 0x15f6 <vfprintf+0x196>
    160c:	0f c0       	rjmp	.+30     	; 0x162c <vfprintf+0x1cc>
    160e:	f4 01       	movw	r30, r8
    1610:	17 fd       	sbrc	r17, 7
    1612:	85 91       	lpm	r24, Z+
    1614:	17 ff       	sbrs	r17, 7
    1616:	81 91       	ld	r24, Z+
    1618:	4f 01       	movw	r8, r30
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	b3 01       	movw	r22, r6
    161e:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    1622:	e1 10       	cpse	r14, r1
    1624:	ea 94       	dec	r14
    1626:	08 94       	sec
    1628:	c1 08       	sbc	r12, r1
    162a:	d1 08       	sbc	r13, r1
    162c:	c1 14       	cp	r12, r1
    162e:	d1 04       	cpc	r13, r1
    1630:	71 f7       	brne	.-36     	; 0x160e <vfprintf+0x1ae>
    1632:	e7 c0       	rjmp	.+462    	; 0x1802 <vfprintf+0x3a2>
    1634:	84 36       	cpi	r24, 0x64	; 100
    1636:	11 f0       	breq	.+4      	; 0x163c <vfprintf+0x1dc>
    1638:	89 36       	cpi	r24, 0x69	; 105
    163a:	51 f5       	brne	.+84     	; 0x1690 <vfprintf+0x230>
    163c:	f5 01       	movw	r30, r10
    163e:	17 ff       	sbrs	r17, 7
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <vfprintf+0x1f0>
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	a2 81       	ldd	r26, Z+2	; 0x02
    1648:	b3 81       	ldd	r27, Z+3	; 0x03
    164a:	24 e0       	ldi	r18, 0x04	; 4
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <vfprintf+0x200>
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	aa 27       	eor	r26, r26
    1656:	97 fd       	sbrc	r25, 7
    1658:	a0 95       	com	r26
    165a:	ba 2f       	mov	r27, r26
    165c:	22 e0       	ldi	r18, 0x02	; 2
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	a2 0e       	add	r10, r18
    1662:	b3 1e       	adc	r11, r19
    1664:	01 2f       	mov	r16, r17
    1666:	0f 76       	andi	r16, 0x6F	; 111
    1668:	b7 ff       	sbrs	r27, 7
    166a:	08 c0       	rjmp	.+16     	; 0x167c <vfprintf+0x21c>
    166c:	b0 95       	com	r27
    166e:	a0 95       	com	r26
    1670:	90 95       	com	r25
    1672:	81 95       	neg	r24
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	af 4f       	sbci	r26, 0xFF	; 255
    1678:	bf 4f       	sbci	r27, 0xFF	; 255
    167a:	00 68       	ori	r16, 0x80	; 128
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	a2 01       	movw	r20, r4
    1682:	2a e0       	ldi	r18, 0x0A	; 10
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ultoa_invert>
    168a:	d8 2e       	mov	r13, r24
    168c:	d4 18       	sub	r13, r4
    168e:	3f c0       	rjmp	.+126    	; 0x170e <vfprintf+0x2ae>
    1690:	85 37       	cpi	r24, 0x75	; 117
    1692:	21 f4       	brne	.+8      	; 0x169c <vfprintf+0x23c>
    1694:	1f 7e       	andi	r17, 0xEF	; 239
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	20 c0       	rjmp	.+64     	; 0x16dc <vfprintf+0x27c>
    169c:	19 7f       	andi	r17, 0xF9	; 249
    169e:	8f 36       	cpi	r24, 0x6F	; 111
    16a0:	a9 f0       	breq	.+42     	; 0x16cc <vfprintf+0x26c>
    16a2:	80 37       	cpi	r24, 0x70	; 112
    16a4:	20 f4       	brcc	.+8      	; 0x16ae <vfprintf+0x24e>
    16a6:	88 35       	cpi	r24, 0x58	; 88
    16a8:	09 f0       	breq	.+2      	; 0x16ac <vfprintf+0x24c>
    16aa:	ae c0       	rjmp	.+348    	; 0x1808 <vfprintf+0x3a8>
    16ac:	0b c0       	rjmp	.+22     	; 0x16c4 <vfprintf+0x264>
    16ae:	80 37       	cpi	r24, 0x70	; 112
    16b0:	21 f0       	breq	.+8      	; 0x16ba <vfprintf+0x25a>
    16b2:	88 37       	cpi	r24, 0x78	; 120
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <vfprintf+0x258>
    16b6:	a8 c0       	rjmp	.+336    	; 0x1808 <vfprintf+0x3a8>
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <vfprintf+0x25c>
    16ba:	10 61       	ori	r17, 0x10	; 16
    16bc:	14 ff       	sbrs	r17, 4
    16be:	09 c0       	rjmp	.+18     	; 0x16d2 <vfprintf+0x272>
    16c0:	14 60       	ori	r17, 0x04	; 4
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <vfprintf+0x272>
    16c4:	14 ff       	sbrs	r17, 4
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <vfprintf+0x278>
    16c8:	16 60       	ori	r17, 0x06	; 6
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x278>
    16cc:	28 e0       	ldi	r18, 0x08	; 8
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <vfprintf+0x27c>
    16d2:	20 e1       	ldi	r18, 0x10	; 16
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfprintf+0x27c>
    16d8:	20 e1       	ldi	r18, 0x10	; 16
    16da:	32 e0       	ldi	r19, 0x02	; 2
    16dc:	f5 01       	movw	r30, r10
    16de:	17 ff       	sbrs	r17, 7
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <vfprintf+0x290>
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	44 e0       	ldi	r20, 0x04	; 4
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0x29c>
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	42 e0       	ldi	r20, 0x02	; 2
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	a4 0e       	add	r10, r20
    16fe:	b5 1e       	adc	r11, r21
    1700:	a2 01       	movw	r20, r4
    1702:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__ultoa_invert>
    1706:	d8 2e       	mov	r13, r24
    1708:	d4 18       	sub	r13, r4
    170a:	01 2f       	mov	r16, r17
    170c:	0f 77       	andi	r16, 0x7F	; 127
    170e:	06 ff       	sbrs	r16, 6
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <vfprintf+0x2c4>
    1712:	0e 7f       	andi	r16, 0xFE	; 254
    1714:	df 14       	cp	r13, r15
    1716:	30 f4       	brcc	.+12     	; 0x1724 <vfprintf+0x2c4>
    1718:	04 ff       	sbrs	r16, 4
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <vfprintf+0x2c8>
    171c:	02 fd       	sbrc	r16, 2
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <vfprintf+0x2c8>
    1720:	0f 7e       	andi	r16, 0xEF	; 239
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <vfprintf+0x2c8>
    1724:	1d 2d       	mov	r17, r13
    1726:	01 c0       	rjmp	.+2      	; 0x172a <vfprintf+0x2ca>
    1728:	1f 2d       	mov	r17, r15
    172a:	80 2f       	mov	r24, r16
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	04 ff       	sbrs	r16, 4
    1730:	0c c0       	rjmp	.+24     	; 0x174a <vfprintf+0x2ea>
    1732:	fe 01       	movw	r30, r28
    1734:	ed 0d       	add	r30, r13
    1736:	f1 1d       	adc	r31, r1
    1738:	20 81       	ld	r18, Z
    173a:	20 33       	cpi	r18, 0x30	; 48
    173c:	11 f4       	brne	.+4      	; 0x1742 <vfprintf+0x2e2>
    173e:	09 7e       	andi	r16, 0xE9	; 233
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <vfprintf+0x2f4>
    1742:	02 ff       	sbrs	r16, 2
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <vfprintf+0x2f2>
    1746:	1e 5f       	subi	r17, 0xFE	; 254
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <vfprintf+0x2f4>
    174a:	86 78       	andi	r24, 0x86	; 134
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	09 f0       	breq	.+2      	; 0x1754 <vfprintf+0x2f4>
    1752:	1f 5f       	subi	r17, 0xFF	; 255
    1754:	80 2e       	mov	r8, r16
    1756:	99 24       	eor	r9, r9
    1758:	03 fd       	sbrc	r16, 3
    175a:	12 c0       	rjmp	.+36     	; 0x1780 <vfprintf+0x320>
    175c:	00 ff       	sbrs	r16, 0
    175e:	0d c0       	rjmp	.+26     	; 0x177a <vfprintf+0x31a>
    1760:	fd 2c       	mov	r15, r13
    1762:	1e 15       	cp	r17, r14
    1764:	50 f4       	brcc	.+20     	; 0x177a <vfprintf+0x31a>
    1766:	fe 0c       	add	r15, r14
    1768:	f1 1a       	sub	r15, r17
    176a:	1e 2d       	mov	r17, r14
    176c:	06 c0       	rjmp	.+12     	; 0x177a <vfprintf+0x31a>
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	b3 01       	movw	r22, r6
    1774:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    1778:	1f 5f       	subi	r17, 0xFF	; 255
    177a:	1e 15       	cp	r17, r14
    177c:	c0 f3       	brcs	.-16     	; 0x176e <vfprintf+0x30e>
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <vfprintf+0x328>
    1780:	1e 15       	cp	r17, r14
    1782:	10 f4       	brcc	.+4      	; 0x1788 <vfprintf+0x328>
    1784:	e1 1a       	sub	r14, r17
    1786:	01 c0       	rjmp	.+2      	; 0x178a <vfprintf+0x32a>
    1788:	ee 24       	eor	r14, r14
    178a:	84 fe       	sbrs	r8, 4
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <vfprintf+0x34c>
    178e:	80 e3       	ldi	r24, 0x30	; 48
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	b3 01       	movw	r22, r6
    1794:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    1798:	82 fe       	sbrs	r8, 2
    179a:	1f c0       	rjmp	.+62     	; 0x17da <vfprintf+0x37a>
    179c:	81 fe       	sbrs	r8, 1
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <vfprintf+0x346>
    17a0:	88 e5       	ldi	r24, 0x58	; 88
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	10 c0       	rjmp	.+32     	; 0x17c6 <vfprintf+0x366>
    17a6:	88 e7       	ldi	r24, 0x78	; 120
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <vfprintf+0x366>
    17ac:	c4 01       	movw	r24, r8
    17ae:	86 78       	andi	r24, 0x86	; 134
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	91 f0       	breq	.+36     	; 0x17da <vfprintf+0x37a>
    17b6:	81 fc       	sbrc	r8, 1
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x35e>
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <vfprintf+0x360>
    17be:	8b e2       	ldi	r24, 0x2B	; 43
    17c0:	07 fd       	sbrc	r16, 7
    17c2:	8d e2       	ldi	r24, 0x2D	; 45
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	b3 01       	movw	r22, r6
    17c8:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0x37a>
    17ce:	80 e3       	ldi	r24, 0x30	; 48
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	b3 01       	movw	r22, r6
    17d4:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    17d8:	fa 94       	dec	r15
    17da:	df 14       	cp	r13, r15
    17dc:	c0 f3       	brcs	.-16     	; 0x17ce <vfprintf+0x36e>
    17de:	da 94       	dec	r13
    17e0:	f2 01       	movw	r30, r4
    17e2:	ed 0d       	add	r30, r13
    17e4:	f1 1d       	adc	r31, r1
    17e6:	80 81       	ld	r24, Z
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	b3 01       	movw	r22, r6
    17ec:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    17f0:	dd 20       	and	r13, r13
    17f2:	a9 f7       	brne	.-22     	; 0x17de <vfprintf+0x37e>
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <vfprintf+0x3a2>
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	b3 01       	movw	r22, r6
    17fc:	0e 94 24 0c 	call	0x1848	; 0x1848 <fputc>
    1800:	ea 94       	dec	r14
    1802:	ee 20       	and	r14, r14
    1804:	c1 f7       	brne	.-16     	; 0x17f6 <vfprintf+0x396>
    1806:	40 ce       	rjmp	.-896    	; 0x1488 <vfprintf+0x28>
    1808:	f3 01       	movw	r30, r6
    180a:	86 81       	ldd	r24, Z+6	; 0x06
    180c:	97 81       	ldd	r25, Z+7	; 0x07
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vfprintf+0x3b4>
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	9f ef       	ldi	r25, 0xFF	; 255
    1814:	2d 96       	adiw	r28, 0x0d	; 13
    1816:	e2 e1       	ldi	r30, 0x12	; 18
    1818:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__epilogue_restores__>

0000181c <strnlen_P>:
    181c:	fc 01       	movw	r30, r24
    181e:	05 90       	lpm	r0, Z+
    1820:	61 50       	subi	r22, 0x01	; 1
    1822:	70 40       	sbci	r23, 0x00	; 0
    1824:	01 10       	cpse	r0, r1
    1826:	d8 f7       	brcc	.-10     	; 0x181e <strnlen_P+0x2>
    1828:	80 95       	com	r24
    182a:	90 95       	com	r25
    182c:	8e 0f       	add	r24, r30
    182e:	9f 1f       	adc	r25, r31
    1830:	08 95       	ret

00001832 <strnlen>:
    1832:	fc 01       	movw	r30, r24
    1834:	61 50       	subi	r22, 0x01	; 1
    1836:	70 40       	sbci	r23, 0x00	; 0
    1838:	01 90       	ld	r0, Z+
    183a:	01 10       	cpse	r0, r1
    183c:	d8 f7       	brcc	.-10     	; 0x1834 <strnlen+0x2>
    183e:	80 95       	com	r24
    1840:	90 95       	com	r25
    1842:	8e 0f       	add	r24, r30
    1844:	9f 1f       	adc	r25, r31
    1846:	08 95       	ret

00001848 <fputc>:
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	8c 01       	movw	r16, r24
    1852:	eb 01       	movw	r28, r22
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 ff       	sbrs	r24, 1
    1858:	1b c0       	rjmp	.+54     	; 0x1890 <fputc+0x48>
    185a:	82 ff       	sbrs	r24, 2
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <fputc+0x30>
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	28 17       	cp	r18, r24
    1868:	39 07       	cpc	r19, r25
    186a:	64 f4       	brge	.+24     	; 0x1884 <fputc+0x3c>
    186c:	e8 81       	ld	r30, Y
    186e:	f9 81       	ldd	r31, Y+1	; 0x01
    1870:	01 93       	st	Z+, r16
    1872:	f9 83       	std	Y+1, r31	; 0x01
    1874:	e8 83       	st	Y, r30
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <fputc+0x3c>
    1878:	e8 85       	ldd	r30, Y+8	; 0x08
    187a:	f9 85       	ldd	r31, Y+9	; 0x09
    187c:	80 2f       	mov	r24, r16
    187e:	09 95       	icall
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	31 f4       	brne	.+12     	; 0x1890 <fputc+0x48>
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	9f 83       	std	Y+7, r25	; 0x07
    188c:	8e 83       	std	Y+6, r24	; 0x06
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <fputc+0x4c>
    1890:	0f ef       	ldi	r16, 0xFF	; 255
    1892:	1f ef       	ldi	r17, 0xFF	; 255
    1894:	c8 01       	movw	r24, r16
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <__ultoa_invert>:
    18a0:	fa 01       	movw	r30, r20
    18a2:	aa 27       	eor	r26, r26
    18a4:	28 30       	cpi	r18, 0x08	; 8
    18a6:	51 f1       	breq	.+84     	; 0x18fc <__ultoa_invert+0x5c>
    18a8:	20 31       	cpi	r18, 0x10	; 16
    18aa:	81 f1       	breq	.+96     	; 0x190c <__ultoa_invert+0x6c>
    18ac:	e8 94       	clt
    18ae:	6f 93       	push	r22
    18b0:	6e 7f       	andi	r22, 0xFE	; 254
    18b2:	6e 5f       	subi	r22, 0xFE	; 254
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	8f 4f       	sbci	r24, 0xFF	; 255
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	af 4f       	sbci	r26, 0xFF	; 255
    18bc:	b1 e0       	ldi	r27, 0x01	; 1
    18be:	3e d0       	rcall	.+124    	; 0x193c <__ultoa_invert+0x9c>
    18c0:	b4 e0       	ldi	r27, 0x04	; 4
    18c2:	3c d0       	rcall	.+120    	; 0x193c <__ultoa_invert+0x9c>
    18c4:	67 0f       	add	r22, r23
    18c6:	78 1f       	adc	r23, r24
    18c8:	89 1f       	adc	r24, r25
    18ca:	9a 1f       	adc	r25, r26
    18cc:	a1 1d       	adc	r26, r1
    18ce:	68 0f       	add	r22, r24
    18d0:	79 1f       	adc	r23, r25
    18d2:	8a 1f       	adc	r24, r26
    18d4:	91 1d       	adc	r25, r1
    18d6:	a1 1d       	adc	r26, r1
    18d8:	6a 0f       	add	r22, r26
    18da:	71 1d       	adc	r23, r1
    18dc:	81 1d       	adc	r24, r1
    18de:	91 1d       	adc	r25, r1
    18e0:	a1 1d       	adc	r26, r1
    18e2:	20 d0       	rcall	.+64     	; 0x1924 <__ultoa_invert+0x84>
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <__ultoa_invert+0x48>
    18e6:	68 94       	set
    18e8:	3f 91       	pop	r19
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	26 9f       	mul	r18, r22
    18ee:	11 24       	eor	r1, r1
    18f0:	30 19       	sub	r19, r0
    18f2:	30 5d       	subi	r19, 0xD0	; 208
    18f4:	31 93       	st	Z+, r19
    18f6:	de f6       	brtc	.-74     	; 0x18ae <__ultoa_invert+0xe>
    18f8:	cf 01       	movw	r24, r30
    18fa:	08 95       	ret
    18fc:	46 2f       	mov	r20, r22
    18fe:	47 70       	andi	r20, 0x07	; 7
    1900:	40 5d       	subi	r20, 0xD0	; 208
    1902:	41 93       	st	Z+, r20
    1904:	b3 e0       	ldi	r27, 0x03	; 3
    1906:	0f d0       	rcall	.+30     	; 0x1926 <__ultoa_invert+0x86>
    1908:	c9 f7       	brne	.-14     	; 0x18fc <__ultoa_invert+0x5c>
    190a:	f6 cf       	rjmp	.-20     	; 0x18f8 <__ultoa_invert+0x58>
    190c:	46 2f       	mov	r20, r22
    190e:	4f 70       	andi	r20, 0x0F	; 15
    1910:	40 5d       	subi	r20, 0xD0	; 208
    1912:	4a 33       	cpi	r20, 0x3A	; 58
    1914:	18 f0       	brcs	.+6      	; 0x191c <__ultoa_invert+0x7c>
    1916:	49 5d       	subi	r20, 0xD9	; 217
    1918:	31 fd       	sbrc	r19, 1
    191a:	40 52       	subi	r20, 0x20	; 32
    191c:	41 93       	st	Z+, r20
    191e:	02 d0       	rcall	.+4      	; 0x1924 <__ultoa_invert+0x84>
    1920:	a9 f7       	brne	.-22     	; 0x190c <__ultoa_invert+0x6c>
    1922:	ea cf       	rjmp	.-44     	; 0x18f8 <__ultoa_invert+0x58>
    1924:	b4 e0       	ldi	r27, 0x04	; 4
    1926:	a6 95       	lsr	r26
    1928:	97 95       	ror	r25
    192a:	87 95       	ror	r24
    192c:	77 95       	ror	r23
    192e:	67 95       	ror	r22
    1930:	ba 95       	dec	r27
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__ultoa_invert+0x86>
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	61 05       	cpc	r22, r1
    1938:	71 05       	cpc	r23, r1
    193a:	08 95       	ret
    193c:	9b 01       	movw	r18, r22
    193e:	ac 01       	movw	r20, r24
    1940:	0a 2e       	mov	r0, r26
    1942:	06 94       	lsr	r0
    1944:	57 95       	ror	r21
    1946:	47 95       	ror	r20
    1948:	37 95       	ror	r19
    194a:	27 95       	ror	r18
    194c:	ba 95       	dec	r27
    194e:	c9 f7       	brne	.-14     	; 0x1942 <__ultoa_invert+0xa2>
    1950:	62 0f       	add	r22, r18
    1952:	73 1f       	adc	r23, r19
    1954:	84 1f       	adc	r24, r20
    1956:	95 1f       	adc	r25, r21
    1958:	a0 1d       	adc	r26, r0
    195a:	08 95       	ret

0000195c <__mulsi3>:
    195c:	62 9f       	mul	r22, r18
    195e:	d0 01       	movw	r26, r0
    1960:	73 9f       	mul	r23, r19
    1962:	f0 01       	movw	r30, r0
    1964:	82 9f       	mul	r24, r18
    1966:	e0 0d       	add	r30, r0
    1968:	f1 1d       	adc	r31, r1
    196a:	64 9f       	mul	r22, r20
    196c:	e0 0d       	add	r30, r0
    196e:	f1 1d       	adc	r31, r1
    1970:	92 9f       	mul	r25, r18
    1972:	f0 0d       	add	r31, r0
    1974:	83 9f       	mul	r24, r19
    1976:	f0 0d       	add	r31, r0
    1978:	74 9f       	mul	r23, r20
    197a:	f0 0d       	add	r31, r0
    197c:	65 9f       	mul	r22, r21
    197e:	f0 0d       	add	r31, r0
    1980:	99 27       	eor	r25, r25
    1982:	72 9f       	mul	r23, r18
    1984:	b0 0d       	add	r27, r0
    1986:	e1 1d       	adc	r30, r1
    1988:	f9 1f       	adc	r31, r25
    198a:	63 9f       	mul	r22, r19
    198c:	b0 0d       	add	r27, r0
    198e:	e1 1d       	adc	r30, r1
    1990:	f9 1f       	adc	r31, r25
    1992:	bd 01       	movw	r22, r26
    1994:	cf 01       	movw	r24, r30
    1996:	11 24       	eor	r1, r1
    1998:	08 95       	ret

0000199a <__prologue_saves__>:
    199a:	2f 92       	push	r2
    199c:	3f 92       	push	r3
    199e:	4f 92       	push	r4
    19a0:	5f 92       	push	r5
    19a2:	6f 92       	push	r6
    19a4:	7f 92       	push	r7
    19a6:	8f 92       	push	r8
    19a8:	9f 92       	push	r9
    19aa:	af 92       	push	r10
    19ac:	bf 92       	push	r11
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	ca 1b       	sub	r28, r26
    19c4:	db 0b       	sbc	r29, r27
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	09 94       	ijmp

000019d2 <__epilogue_restores__>:
    19d2:	2a 88       	ldd	r2, Y+18	; 0x12
    19d4:	39 88       	ldd	r3, Y+17	; 0x11
    19d6:	48 88       	ldd	r4, Y+16	; 0x10
    19d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    19da:	6e 84       	ldd	r6, Y+14	; 0x0e
    19dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    19de:	8c 84       	ldd	r8, Y+12	; 0x0c
    19e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    19e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    19e4:	b9 84       	ldd	r11, Y+9	; 0x09
    19e6:	c8 84       	ldd	r12, Y+8	; 0x08
    19e8:	df 80       	ldd	r13, Y+7	; 0x07
    19ea:	ee 80       	ldd	r14, Y+6	; 0x06
    19ec:	fd 80       	ldd	r15, Y+5	; 0x05
    19ee:	0c 81       	ldd	r16, Y+4	; 0x04
    19f0:	1b 81       	ldd	r17, Y+3	; 0x03
    19f2:	aa 81       	ldd	r26, Y+2	; 0x02
    19f4:	b9 81       	ldd	r27, Y+1	; 0x01
    19f6:	ce 0f       	add	r28, r30
    19f8:	d1 1d       	adc	r29, r1
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	ed 01       	movw	r28, r26
    1a06:	08 95       	ret

00001a08 <_exit>:
    1a08:	f8 94       	cli

00001a0a <__stop_program>:
    1a0a:	ff cf       	rjmp	.-2      	; 0x1a0a <__stop_program>
